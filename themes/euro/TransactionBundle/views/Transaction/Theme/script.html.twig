{% block _Transaction_paymentOption_javascript %}
    {{ form_javascript(form) }}
    <script type='text/javascript' id="paymentOption_js">
        (function ($) {
            var pluginName = "paymentOption";

            var PaymentOptions = function (elem, options) {
                this.settings = $.extend(true, {}, options);
                this.paymentOptions = [];
                this.$el = $(elem);
                this.el = options.elem;
                this.ids = [];
            };

            PaymentOptions.prototype = {
                'setCustomerId': function (customerId) {
                    if (customerId === null) {
                        this.clear();``

                        return;
                    }
                    this.clear();
                    var url = this.settings.url.replace('__customer_id__', customerId);
                    this.$el.selectpicker('val', '');
                    $.ajax({
                        'url': url,
                        'dataType': 'json',
                        'context': this,
                        'success': function (data) {
                            var transactionPaymentOption = {{ form.parent.vars.data.getPaymentOption()|serialize('json')|raw }};
                            if (transactionPaymentOption !== null) {
                                transactionPaymentOption.email = transactionPaymentOption.fields.email;
                                this.ids.push(transactionPaymentOption.id);
                                this.add(transactionPaymentOption);
                            }
                            {% if form.vars.data is not null %}
                                {% if form.vars.data.fields.account_id is defined %}
                                    this.add({'is_active': true, "id": {{ form.vars.data.id }}, "type": "{{ form.vars.data.paymentOption.code }}", "email": "{{ form.vars.data.fields.email  }}", "account_id": "{{ form.vars.data.fields.account_id  }}"});
                                {% else %}
                                    this.add({'is_active': true, "id": {{ form.vars.data.id }}, "type": "{{ form.vars.data.paymentOption.code }}", "email": "{{ form.vars.data.fields.email  }}"});
                                {% endif %}
                            {% endif %}
                            for (var i in data) {
                                if (this.ids.indexOf(data[i].id) === -1) {
                                    this.ids.push(data[i].id);
                                    this.add(data[i]);
                                }
                            }
                            this.$el.selectpicker('refresh');
                            this.$el.selectpicker('val', '{{ form.vars.value }}');
                        }
                    });
                },
                'add': function (data) {
                    var ecopayzName = "{{constant('DbBundle\\Entity\\PaymentOption::PAYMENT_MODE_ECOPAYZ')}}";
                    var bitcoinName = "{{constant('DbBundle\\Entity\\PaymentOption::PAYMENT_MODE_BITCOIN')}}";
                    var fieldSelected = data.email;

                    if (data.type === ecopayzName.toUpperCase() || data.type === bitcoinName.toUpperCase( )) {
                        var accountId = (typeof data.account_id !== "undefined") ? data.account_id : data.fields.account_id;
                        fieldSelected = accountId;
                    }
                    if (typeof fieldSelected !== "undefined") {
                        var item = data.is_active ? '<option value="' + data.id + '"> ' + data.type + ' (' +  fieldSelected + ') </option>' : '';
                        this.$el.append(item);
                    }
                },
                'clear': function () {
                    this.$el.html('');
                    this.$el.selectpicker('refresh');
                    this.$el.selectpicker('val', '');
                }
            };

            $.fn[pluginName] = function (options) {
                var args = arguments;
                if(options === undefined || typeof options === 'object') {
                    return this.each(function() {
                        if(!$.data(this, 'plugin_' + pluginName)) {
                            $.data(this, 'plugin_' + pluginName, new PaymentOptions(this, options));
                        }
                    });
                } else if(typeof options === 'string' && options[0] !== '_' && options !== 'init') {
                    if ($.inArray(options, $.fn[pluginName].getters) != -1) {
                        var instance = $.data(this[0], 'plugin_' + pluginName);
                        return instance[options].apply(instance, Array.prototype.slice.call(args, 1));
                    } else if ($.inArray(options, $.fn[pluginName].setters) != -1) {
                        var instance = $.data(this[0], 'plugin_' + pluginName);
                        return instance[options].apply(instance, Array.prototype.slice.call(args, 1));
                    } else {
                        return this.each(function() {
                            var instance = $.data(this, 'plugin_' + pluginName);

                            if (instance instanceof PaymentOptions && $.fn[pluginName].methods[options] && typeof instance[$.fn[pluginName].methods[options]] === 'function') {
                                instance[$.fn[pluginName].methods[options]].apply(instance, Array.prototype.slice.call(args, 1));
                            }
                        });
                    }
                }
            }

            $.fn[pluginName].getters = [];
            $.fn[pluginName].setters = [];

            $.fn[pluginName].methods = {
                'setCustomer': 'setCustomerId'
            };

        })(jQuery);

        $(function () {
            $('#{{ form.vars.id }}').paymentOption({
                'url': '{{ path('customer.payment_option_list', {'id': '__customer_id__'}) }}',
                'type': 'GET',
                'dataType': 'json'
            });
            
            $('#{{ form.vars.id }}').on('change', function() {
                var memberPaymentOptionId = this.value;
                if (typeof memberPaymentOptionId !== 'undefined' || memberPaymentOptionId !== null) {
                    var memberPaymentOptionText = $(this).find("option:selected").text();
                    var regExp = /\(([^)]+)\)/;
                    var matches = regExp.exec(memberPaymentOptionText);
                    var url = '{{ path('member.is_paymentOption_bitcoin', {"id": '__memberPaymentOptionId__'}) }}'.replace(/__memberPaymentOptionId__/g, memberPaymentOptionId);
                    $.ajax({
                        'url': url,
                        'success': function (data) {
                            if (data.isPaymentOptionBitcoin) {
                                window.loadBitcoinFields((matches === null ? '' :matches[1]));
                            } else {
                                window.unloadBitcoinFields();
                            }
                        }
                    });
                } 
            });
        });
    </script>
{% endblock _Transaction_paymentOption_javascript %}

{% block _Transaction_customer_javascript %}
    {% set view = view|default(false) %}
    <script type="text/javascript">
        $(function() {
            $('#{{ id }}').select2({
                'data': {{ value|serialize('json')|raw }},
                'ajax': {
                    'data': function(params) {
                        var page = params.page || 1;
                        var length = $(this).data('length');
                        var start = (page - 1) * length;
                        return {
                            'idColumn': $('#{{ id }}').data('id-column'),
                            'select2': 1,
                            'search': params.term,
                            'length': length,
                            'start': start,
                            'withCurrency': 1,
                            '_format': 'json'
                        };
                    },
                    'processResults': function(data, page) {
                        return {
                            'results': data.data,
                            'pagination': {
                                'more': (page * $(this).data('length')) < data.filtered
                            }
                        };
                    }
                },
                'templateResult': function(data) {
                    if (data.id === null || data.id === '' || !data.id) {
                        return data.text;
                    }

                    if (data.full_name !== null) {
                        return '<i class="fa fa-user"></i> | ' + data.full_name + " (" + data.user.username + ")";
                    }

                    return '<i class="fa fa-user"></i> | ' + data.f_name + ' ' + data.l_name + " (" + data.user.username + ")";
                },
                'templateSelection': function(data, container) {
                    var customerResult = '';
                    if (data.id === null || data.id === '' || !data.id) {
                        return data.text;
                    }

                    if (data.full_name !== null) {
                        return '<i class="fa fa-user"></i> | ' + data.full_name + " (" + data.user.username + ")";
                    }

                    return '<i class="fa fa-user"></i> | ' + data.f_name + ' ' + data.l_name + " (" + data.user.username + ")";
                },
                'placeholder': {
                    'id': null,
                    'text': '<i class="fa fa-user"></i> | {{ placeholder|trans({}, translation_domain) }}'
                },
                'escapeMarkup': function(markup) {
                    return markup;
                }
            });

            {% if view %}
            $('#{{ id }}').select2("enable",false);
            $($('#{{ id }}').data('select2').$container).find('.select2-selection').css({'background-color': "rgba(0,0,0,0)"});
            $('#{{ id }}').trigger('select2:select');
            {% endif %}
        });

        function displayCustomerGroups(data, transactionData){
            var customerGroupText = '';
            var transactionCustomerGroups = data.groups;
            if (typeof transactionData.immutable.customer.groups !== 'undefined') {
                transactionCustomerGroups = transactionData.immutable.customer.groups;
            }
            if (typeof transactionCustomerGroups === 'undefined' || transactionCustomerGroups === null || transactionCustomerGroups.length == 0) {
                $('.customer-data[data-field="groups"]').html('<font color="red">No group selected</font>');
            } else {
                if (!Array.isArray(transactionCustomerGroups)) {
                    transactionCustomerGroups = data.groups;
                }
                if (Array.isArray(transactionCustomerGroups)) {
                    transactionCustomerGroups.forEach(function (row) {
                        customerGroupText += row.name + ', ';
                    });
                    $('.customer-data[data-field="groups"]').html(customerGroupText.replace(/,\s*$/, ""));
                }
            }
        }

        $(function() {
            $('#{{ form.vars.id }}').on('select2:select', function(event) {
                if($(this).select2('data')[0] !== undefined && $(this).select2('data')[0] !== null && $(this).select2('data')[0] !== '') {
                    var data = $(this).select2('data')[0];
                    {% if not form.parent.gateway.vars.view|default(false) and form.parent.gateway.vars.id is defined %}
                    $('#{{ form.parent.gateway.vars.id }}').removeAttr('disabled');
                    {% endif %}

                    {% if not form.parent.adjustment.vars.view|default(false) and form.parent.adjustment.vars.id is defined %}
                    $('#{{ form.parent.adjustment.vars.id }}').removeAttr('disabled');
                    {% endif %}

                    var transactionisNew = {{ form.parent.vars.value.customer is null ? 'true' : 'false' }};
                    {%  if form.parent.paymentOption is defined %}
                        {% if not form.parent.paymentOption.vars.view|default(false) %}
                            if (transactionisNew) { 
                                $('#{{ form.parent.paymentOption.vars.id }}').removeAttr('disabled');
                            }
                        {% endif %}
                    {%  endif  %}

                    objectExtend(data);
                    {%
                        if form.parent.vars.value.details.customer.affiliate is defined
                            and form.parent.vars.value.status in [
                                constant('DbBundle\\Entity\\Transaction::TRANSACTION_STATUS_END'),
                                constant('DbBundle\\Entity\\Transaction::TRANSACTION_STATUS_DECLINE')
                            ]
                    %}
                            data.affiliate = {{ form.parent.vars.value.details.customer.affiliate|json_encode()|raw('js') }};
                    {% endif %}
                    $('.customer-data').each(function() {
                        var field = $(this).data('field');
                        $(this).html(data.array_get(field));
                    });
                    displayCustomerGroups(data, transactionInfo.data);
                    var transactionCurrency = {{ form.parent.vars.data.getCurrency()|serialize('json')|raw }};

                    $('#{{ form.parent.currency.vars.id }}').html(transactionCurrency !== null ? transactionCurrency.name : data.currency.name);
                    {%  if form.parent.paymentOption is defined %}
                        $('#{{ form.parent.paymentOption.vars.id }}').paymentOption('setCustomer', $(this).select2('data')[0]['id']);
                    {% endif %}
                    $.ajax({
                        'url': '{{ path('customerProduct.list_search', { 'id': '__id__' }) }}'.replace(/__id__/g, $(this).select2('data')[0]['id']),
                        'type': 'POST',
                        'data': {'isActive':true},
                        'allowClear': true,
                        'success': function(data) {
//                            data.unshift({'id': null, 'text': 'Select Product'});
                            $('#{{ form.parent.subTransactions.vars.id }}').removeClass('hide');
                            if(typeof window.customerProductLoad == 'function') {
                                window.customerProductLoad(data);
                            }
                        }
                    });

                    addSummaryInfo('customer', {
                        'balance': (new Decimal(data.available_balance)).toFixed(2,1),
                        'countryName': data.country !== null ? data.country.name : "",
                        'currencyName': transactionCurrency !== null ? transactionCurrency.name : data.currency.name,
                        'disabled': data.disabled,
                        'fName': data.fName,
                        'lName': data.lName,
                        'level': data.level,
                        'id': data.id,
                        'isAffiliate': data.isAffiliate,
                        'socials': data.socials,
                        'user': data.user
                    });
                    applySummary(); 
                    {% if form.parent.gateway.vars.id is defined %}
                        $('#{{ form.parent.gateway.vars.id }}').trigger('select2:select');
                    {% endif %}
                }else {
                    $('#{{ form.parent.currency.vars.id }}').html('');
                }
            });
        });
    </script>
{% endblock _Transaction_customer_javascript %}

{% block _Transaction_subTransactions_javascript %}
    <script type="text/javascript">
        var Products = function(type, options) {
            options = $.extend(true, { autoRender: true }, options);
            this.prototype = options.prototype;
            this.products = {};
            this.toProducts = {};
            this.items = [];
            this.lastIndex = 0;
            this.$el = $(options.elem);
            this.type = type;
            this.autoRender = options.autoRender;

            this.init();
        }

        Products.prototype = {
            'init': function() {

            },
            'setProducts': function(products) {
                this.products = {};
                for(var i in products) {
                    this.products[products[i].id] = products[i];
                }
            },
            'setToProducts': function(products) {
                this.toProducts = {};
                for(var i in products) {
                    this.toProducts[products[i].id] = products[i];
                }
            },
            'add': function(info) {
                var index = this.lastIndex;
                this.items[index] = new Product(this, info, this.getAvailable(info.type), this.lastIndex);
                this.lastIndex++;
                return this.items[index];
            },
            'getAvailable': function(type) {
                if(this.type == "deposit" || this.type == "withdraw" || this.type == "transfer" || this.type == "adjustment") {
                    var _products = $.extend({},this.products);

                    for(var i in this.items) {
                        delete _products[this.items[i].info.customerProduct];
                    }

                    return _products;
                } else if(this.type == 'p2p_transfer' && type == 2) {
                    var _products = $.extend({},this.products);

                    for(var i in this.items) {
                        delete _products[this.items[i].info.customerProduct];
                    }

                    return _products;
                } else if(this.type == 'p2p_transfer' && type == 1) {
                    var _products = $.extend({},this.toProducts);

                    for(var i in this.items) {
                        delete _products[this.items[i].info.customerProduct];
                    }

                    return _products;
                }
            },
            'clearTo': function() {
                if(this.type == 'p2p_transfer') {
                    for(var i in this.items) {
                        if(this.items[i].info.type == 1) {
                            this.remove(i);
                        }
                    }
                } else {
                    for(var i in this.items) {
                        this.remove(i);
                    }
                }
            },
            'clear': function() {
                if(this.type == 'p2p_transfer') {
                    for(var i in this.items) {
                        if(this.items[i].info.type == 2) {
                            this.remove(i);
                        }
                    }
                } else {
                    for(var i in this.items) {
                        this.remove(i);
                    }
                }
            },
            'remove': function(index) {
                this.items[index].destroy();
                delete this.items[index];
            }
        };

        var Product = function(list, info, products,index) {
            this.list = list;
            this.info = info;
            this.view = null;
            this.index = index;
            this.products = products;
            this.renderTo = info.renderTo || this.list.$el;
            this.init();
        };

        Product.prototype = {
            "init": function() {
                var isPaymentBitcoin = "{{ form.parent.vars.value.isTransactionPaymentBitcoin }}";
                
                if (!isPaymentBitcoin) {
                    this.info.amount = (new Decimal(this.info.amount)).toFixed(2,1);
                }
                
                var info = this.info;
                var prototype = this.list.prototype;
                var labelProductDeleted = '(DELETED)';

                prototype = prototype.replace(/{{ form.vars.prototype.vars.name }}/g,this.index);
                this.view = $(prototype);
                let customerProductId = info.customerProduct;
                let subtransaction = this.info;

                this.view.find('.subtransaction-type').val(subtransaction.type);
                subtransactionAmountText = new Decimal(subtransaction.amount).toFixed(2);
                if (isPaymentBitcoin && this.info.isAMSTransaction) {
                    subtransactionAmountText = subtransactionAmountText + ' (' + this.info.bitcoinRequestedAmount + ' BTC)';
                }
                this.view.find('span.subtransaction-amount').html(subtransactionAmountText);
                this.view.find('input.subtransaction-amount').val(subtransactionAmountText);

                if (typeof this.products[customerProductId] != 'undefined') {
                    showImmutable = this.info.showImmutableCustomerProductData;
                    if (showImmutable) {
                        labelProductDeleted = (this.products[customerProductId].product.deletedAt != null) ? labelProductDeleted : '';
                        this.view.find('.subtransaction-product').remove();
                        this.view.find('span.immutableCustomerProductData').html(this.products[customerProductId].product.name + ' (' + subtransaction.immutableCustomerProductData + ') ' + labelProductDeleted);
                        this.view.find('span.immutableCustomerProductData').removeClass('hidden');
                    }
                }

                this.hideRemoveProductButtonForFirstProduct();

                // create the Customer's products selection dropdown list
                for(var i in this.products) {
                    if(this.products[i].id != null && this.products[i].product.deletedAt == null) { //do not display also customer products that have been deleted in product list
                        this.view.find('.subtransaction-product').append('<option value="' + this.products[i].id + '">' + this.products[i].product.name + ' (' + this.products[i].userName + ')</option>');
                    }
                }

                if (this.info.hasFailedWithIntegration == "1") {
                    this.view.find('.integration-error-message').append('<p>Failed processing with 3rd party integration.</p>');
                }

                var thisproduct = this;
                this.view.find('.subtransaction-product').selectpicker({})
                    .on('shown.bs.select', function(e) {
                        $(this).data('old-value', e.target.value);
                    })
                    .on('changed.bs.select', {'product': this}, function(e, clickedIndex, newValue, oldValue) {
                    if(e.target.value) {

                        e.data.product.info.customerProduct = e.target.value;

                        var list = thisproduct.list;
                        for(var i in list.items) {
                            if(i != thisproduct.index && thisproduct.info.customerProduct) {
                                var it = list.items[i];
                                var v = it.view;

                                //remove product from all other customerproduct dropdowns
                                v.find('.subtransaction-product').find('option[value="'+ e.target.value +'"]').remove();
                                var deselectedCustomerProductId = $(this).data('old-value');
                                var selectedProductHasChanged = e.target.value !== deselectedCustomerProductId && deselectedCustomerProductId != '';
                                if(selectedProductHasChanged) {
                                    thisproduct.addDesectedProductBackToSelection(deselectedCustomerProductId, v);
                                }

                                v.find('.subtransaction-product').selectpicker('refresh');
                                v.find('.subtransaction-product').selectpicker('val', it.info.customerProduct);
                            }
                        }
                        e.data.product.applySummary();
                    }
                });

                this.view.data('product',this);

                this.view.find('input.subtransaction-amount').on('keyup',{'product': this},function(e) {
                    var _val = Number.parseFloat($(this).val());
                    if (isNaN(_val)) {
                        e.data.product.info.amount = 0;
                    } else {
                        e.data.product.info.amount = _val;
                    }
                    e.data.product.applySummary();
                });
                this.view.find('input.subtransaction-amount').on('focus',{'product': this}, function(e){
                    var _val = Number.parseFloat($(this).val());
                    if (isNaN(_val)) {
                        e.data.product.info.amount = 0;
                    } else {
                        e.data.product.info.amount = _val;
                    }
                    $(this).val(e.data.product.info.amount);
                    e.data.product.applySummary();
                });

                this.view.find('.subtransaction-product').on('setDefault', function(event) {
                    $(this).selectpicker('val', info.customerProduct);
                    $(this).off('setDefault');
                });
                this.view.find('.subtransaction-product').trigger('setDefault');


                if(typeof this.info.errors != "undefined") {
                    var _v = this.view;
                    if(typeof this.info.errors.amount != 'undefined' && this.info.errors.amount.length > 0) {
                        $.each(this.info.errors.amount, function() {
                            _v.find('input.subtransaction-amount').closest('.form-group').find('.help-block ul').append('<li><span class="glyphicon glyphicon-exclamation-sign"></span> ' + this + '</li>');
                        });
                        _v.find('input.subtransaction-amount').closest('.form-group').addClass('has-error');
                    }

                    if(typeof this.info.errors.customerProduct != 'undefined' && this.info.errors.customerProduct.length > 0) {

                        $.each(this.info.errors.customerProduct, function() {
                            _v.find('.subtransaction-product').closest('.form-group').find('.help-block ul').append('<li><span class="glyphicon glyphicon-exclamation-sign"></span> ' + this + '</li>');
                        });
                        _v.find('.subtransaction-product').closest('.form-group').addClass('has-error');
                    }
                }

                if(this.info.customerProduct !== null) {
                    this.applySummary();
                }

                if(this.list.autoRender)
                    this.render(this.renderTo);
            },
            "addDesectedProductBackToSelection" : function(deselectedCustomerProductId, v) {
                var customerProductListsToUpdate = $(this.renderTo);
                var sourceCustomerProductList = this.list.products;
                var recipientCustomerProductList = this.list.toProducts;
                var transactionIsP2pTransfer =  this.list.type === 'p2p_transfer';
                var transactionisTransfer = this.list.type === 'transfer';
                var transactionisAdjustment = this.list.type === 'adjustment';
                var subtransactionTypeIsWithdrawal =   this.info.type == 2;

                if (transactionisTransfer || transactionisAdjustment) {
                    customerProductListsToUpdate = $(document);
                }

                if (!transactionIsP2pTransfer || subtransactionTypeIsWithdrawal)  {
                    customerProductListsToUpdate.find(v).find('.subtransaction-product').append('<option value="' + deselectedCustomerProductId + '">' + sourceCustomerProductList[deselectedCustomerProductId].product.name + ' (' + sourceCustomerProductList[deselectedCustomerProductId].userName + ')</option>');
                } else {

                    customerProductListsToUpdate.find(v).find('.subtransaction-product').append('<option value="' + deselectedCustomerProductId + '">' + recipientCustomerProductList[deselectedCustomerProductId].product.name + ' (' + recipientCustomerProductList[deselectedCustomerProductId].userName + ')</option>');
                }
            },
            "hideRemoveProductButtonForFirstProduct": function() {
                var displayedProductsCount = ($('.subtransaction-amount').length + 1);
                var isTransfer = false;
                if ($('.btn-add-to-product').length != 0 && $('.btn-add-from-product').length != 0) {
                    isTransfer = true;
                }
                var defaultCustomerProductDisplayCount = 1;
                if (isTransfer) {
                    defaultCustomerProductDisplayCount = 2;
                }
                if (displayedProductsCount <= defaultCustomerProductDisplayCount){
                    this.view.find('.remove-product-button').remove();
                }
            },
            "applySummary": function() {

                var isSubtransactionTypeDeposit = this.info.type == Global.transaction.type.deposit;
                var isSubtransactionTypeWithdrawal = this.info.type == Global.transaction.type.withdraw;

                var subtransactionAmount = this.info.amount;

                // if transaction type is p2p transfer, convert the amount
                if ($('#toCustomer').length) {
                    var fromRate = $('#Transaction_customer').select2('data')[0].currency.rate;
                    var toRate = $('#toCustomer').select2('data')[0].currency.rate;
                    var converted = (new Decimal(exchangeRate(subtransactionAmount, fromRate, toRate))).toFixed(2, 1);
                }

                if(this.list.type != 'p2p_transfer' || isSubtransactionTypeWithdrawal) {
                    var afterBalance = new Decimal(this.list.products[this.info.customerProduct].balance);
                } else {
                    var afterBalance = new Decimal(this.list.toProducts[this.info.customerProduct].balance);
                }
                if (isSubtransactionTypeDeposit) {
                    if (this.list.type == 'p2p_transfer') {
                        afterBalance = afterBalance.plus(converted);
                    } else {
                        afterBalance = afterBalance.plus(this.info.amount);
                    }
                } else if(isSubtransactionTypeWithdrawal) {
                    if (this.info.hasTransactedWithIntegration == null) {
                        afterBalance = afterBalance.minus(this.info.amount);
                    }
                }

                var customerProduct = null;
                if (this.list.type != 'p2p_transfer' || isSubtransactionTypeWithdrawal) {
                    customerProduct = this.list.products[this.info.customerProduct];
                } else {
                    customerProduct = this.list.toProducts[this.info.customerProduct]
                }

                var summary = {
                    'amount': (new Decimal(this.info.amount)).toFixed(2,1),
                    'afterbalance': afterBalance.toFixed(2,1),
                    'customerProduct': customerProduct,
                    'index': this.index,
                    'type': this.info.type
                };
                summary['customerProduct']['bitcoinRequestedAmount'] = this.info.bitcoinRequestedAmount;
                summary['customerProduct']['balance'] = (new Decimal(summary['customerProduct']['balance'])).toFixed(2,1);
                summary['customerProduct']['immutableCustomerProductData'] = this.info.immutableCustomerProductData;
                addSummaryInfo('subtransactions.' + this.index, summary);
                applySummary();
            },
            "destroy": function() {

                var list = this.list;
                for(var i in list.items) {
                    if(i != this.index && this.info.customerProduct) {
                        var it = list.items[i];
                        var v = it.view;

                        var deselectedCustomerProductId = this.info.customerProduct;
                        this.addDesectedProductBackToSelection(deselectedCustomerProductId, v);
                        v.find('.subtransaction-product').selectpicker('refresh');
                        v.find('.subtransaction-product').selectpicker('val', it.info.customerProduct);
                    }
                }
                removeSummaryInfo('subtransactions.' + this.index);
                applySummary();
                this.view.remove();
            },
            "render": function(to) {
                to = to || this.list.$el;
                $(to).append(this.view);
            }
        };

        $(function() {
            $('#{{ form.vars.id }}').on('click', '.btn-remove-product', function() {
                var product = $(this).closest('.customer-product').data('product');
                product.list.remove(product.index);
            });
        });
    </script>
{% endblock %}

{% block _Transaction_gateway_javascript %}
    {% if setting('transaction.paymentGateway') != 'level' %}
    {% set view = view|default(false) %}
    <script type="text/javascript">
        $(function() {
            $('#{{ id }}').select2({
                'data': {{ value|json_encode()|raw }},
                'ajax': {
                    'url': '{{- setting('transaction.paymentGateway') == 'customer-currency'
                                ? path('gateway.list_search') : path('transaction.gateways', {'type': app.request.get('type')})
                            -}}',
                    'data': function(params) {
                        var page = params.page || 1;
                        var length = $(this).data('length');
                        var start = (page - 1) * length;
                        {% if setting('transaction.paymentGateway') == 'customer-currency' %}
                        var data = {
                            'idColumn': $('#{{ id }}').data('id-column'),
                            'select2': 1,
                            'search': params.term,
                            'length': length,
                            'start': start,
                            '_format': 'json',
                            'tid': {% if form.parent.vars.data.id %}{{ form.parent.vars.data.id }}{% else %}''{% endif %}
                        };
                        data.currencyName = $("#{{ form.parent.customer.vars.id }}").select2('data')[0].currency.name;
                        {% elseif setting('transaction.paymentGateway') == 'customer-group' %}
                            var data = $('#{{ form.parent.vars.id }}').serialize() + '&_format=json';
                            {% if form.parent.vars.id is not null %}
                                data += '&tid={{ form.parent.vars.data.id }}';
                            {% endif %}
                        {% endif %}

                        return data;
                    },
                    'processResults': function(data, page) {
                        var items = {{ value|json_encode()|raw }};
                        {% if setting('transaction.paymentGateway') == 'customer-currency' %}
                        for (var i in data.items) {
                            if (!itemExistsInList(items, data.items[i])) {
                                items.push(data.items[i]);
                            }
                        }
                        return {
                            'results': items,
                            'pagination': {
                                'more': (page * $(this).data('length')) < data.recordsFiltered
                            }
                        };
                        {% elseif setting('transaction.paymentGateway') == 'customer-group' %}
                        for (var i in data) {
                            if (!itemExistsInList(items, data[i])) {
                                items.push(data[i]);
                            }
                        }

                        return {
                            'results': items,
                            'pagination': {'more': false}
                        }
                        {% endif %}
                    }
                },
                'templateResult': function(data) {
                    return '<i class="fa fa-credit-card-alt"></i> | ' + data.name;
                },
                'templateSelection': function(data, container) {
                    return '<i class="fa fa-credit-card-alt"></i> | ' + data.name;
                },
                'placeholder': {
                    'id': null,
                    'name': "{{ placeholder|trans({}, translation_domain) }}"
                },
                'escapeMarkup': function(markup) {
                    return markup;
                }
            });

            {% if view %}
            $('#{{ id }}').select2("enable",false);
            $($('#{{ id }}').data('select2').$container).find('.select2-selection').css({'background-color': "rgba(0,0,0,0)"});
            {% endif %}

            // display payment gateway when viewing transactions
            var data = $('#{{ id }}').select2('data')[0];
            if (typeof data != 'undefined') {
                displayGatewaySummaryData(data);
            }

            $('#{{ id }}').on('select2:select', function(event) {
                var data = $(this).select2('data')[0];
                if(data) {
                    data.details.methods.bonus = {
                        'type': 'bonus',
                        'equation': '-x',
                        'variables': [{'value': 'total_amount', 'var': 'x'}]
                    };
                    displayGatewaySummaryData(data);
                    objectExtend(data);
                    $('.gateway-data').each(function() {
                        var field = $(this).data('field');
                        $(this).html(data.array_get(field));
                    });
                }
            });
        });

        function itemExistsInList(list, item)
        {
            var exists = false;

            for (var i in list) {
                var itemInList = list[i];
                if (itemInList.id === item.id) {
                    exists = true;

                    break;
                }
            }

            return exists;
        }

        function displayGatewaySummaryData(select2Data){
            var data = select2Data;
            addSummaryInfo('gateway',{
                'balance': (new Decimal(data.balance)).toFixed(2,1),
                'currency': data.currency,
                'details': data.details,
                'id': data.id,
                'isActive': data.isActive,
                'levels': data.levels,
                'name': data.name,
                'paymentOption': data.paymentOption,
                'text': data.text
            });
            transactionInfo.options.equations.gateway = data.details.methods.{{ app.request.get('type') }};
            applySummary();
        }
    </script>
    {% endif %}
{% endblock %}

{% block _Transaction_number_javascript %}
    <script type="text/javascript">
        $(function() {
            $('#{{ form.vars.id }}').keyup(function() {
                var field = $(this).data('summary-field');
                if(typeof field == 'undefined') {
                    addSummaryInfo('number', $(this).val());
                } else {
                    addSummaryInfo(field, $(this).val());
                }
                applySummary();
            });
        });
    </script>
{% endblock %}

{% block _Transaction_companyFee_javascript %}
    <script type="text/javascript">
        $(function() {
            $('#{{ form.vars.id }}').keyup(function() {
                var field = $(this).data('summary-field');
                if(typeof field == 'undefined') {
                    addSummaryInfo('fees.companyFee', $(this).val());
                } else {
                    addSummaryInfo(field, $(this).val());
                }
                applySummary();
            });
        });
    </script>
{% endblock %}

{% block _Transaction_customerFee_javascript %}
    <script type="text/javascript">
        $(function() {
            $('#{{ form.vars.id }}').keyup(function() {
                var field = $(this).data('summary-field');
                if(typeof field == 'undefined') {
                    addSummaryInfo('fees.customerFee', $(this).val());
                } else {
                    addSummaryInfo(field, $(this).val());
                }
                applySummary();
            });
        });
    </script>
{% endblock %}

{% block _Transaction_assetjs %}
    {{ asset_add('js', asset('bundles/transaction/js/transaction/form.js'), 'form.asset') }}
    {{ form_assetjs(form) }}
{% endblock _Transaction_assetjs %}

{% block _Transaction_javascript %}
    {{ form_javascript(form) }}

    <script type="text/javascript">
        $(function () {
            $('#{{ form.vars.id }}').form({
                'action': '{{ form.vars.action }}',
                'ajax': {
                    'success': function (data) {
                        if (data.success) {
                            notification('Saved', 'You have successfully saved transaction', 'success');
                            $('#decline-modal').modal('hide');

                            setTimeout(function () {
                                window.location = data.data['@link'];
                            }, 1000);
                        } else if (typeof data.errors !== 'undefined') {
                            for (var i in data.errors) {
                                var error = data.errors[i];
                                $('#' + error.formId)
                                    .closest('.form-group')
                                    .addClass('has-error')
                                    .find('.help-block ul')
                                    .append('<li>' + error.message + '</li>');

                                if (error.formId == '{{ form.reasonToVoidOrDecline.vars.id }}') {
                                    $('#reasonForVoid').closest('.form-group')
                                        .addClass('has-error')
                                        .find('.help-block ul')
                                        .append('<li>' + error.message + '</li>');
                                }
                            }
                            notification('Validation Failed', 'Some fields are invalid', 'error');
                            $('#{{ form.actions.vars.id }} button').removeAttr('disabled');
                            $('.btn-void-transaction').removeAttr('disabled');
                        } else if (typeof data.errorMessage !== 'undefined') {
                            notification('Integration Error!', data.errorMessage, 'error');
                        }
                    },
                    'beforeSend': function (xhr, settings) {
                        $('#{{ form.vars.id }}').find('.form-group').removeClass('has-error');
                        $('#{{ form.vars.id }}').find('.help-block ul li').remove();
                        $('#btnSave').attr('disabled', 'disabled');
                        $('#{{ form.actions.vars.id }} button').attr('disabled', 'disabled');
                        $('.btn-void-transaction').attr('disabled', 'disabled');
                    },
                    'complete': function (xhr, textStatus) {
                        $('#btnSave').removeAttr('disabled');
                    }
                }
            });

            // submit the void/decline modal
            $('.btn-void-transaction').click(function() {
                var submitButtonId = $(this).attr('data-submit-action-id');
                var actionTypeLabel = $(this).attr('data-submit-action-label');
                var reasonForVoidText = $('#reasonForVoid').val();

                $('#Transaction_reasonToVoidOrDecline').val(reasonForVoidText);
                $('#{{ form.vars.id }}').trigger('form:submit', [$('#' + submitButtonId)]);
            });

            // submit form via ajax or show the modal.
            $('.btn-action').click(function () {
                var actionType = $(this).html();
                var submitButton = this;

                if (actionType.toLowerCase() == 'decline' || actionType.toLowerCase() == 'void' || actionType.toLowerCase() == 'confirm') {
                   // Reason container is present if the transaction is either deposit / withdrawal.
                    if ($('#reasonContainer').length !== 0) {
                        var container =  document.getElementById('reasonContainer');
                        $(container).empty();


                        if (actionType.toLowerCase() === 'decline') {
                            var temp = document.getElementById('declineReason');
                            var clone = temp.content.cloneNode(true);
                            $('#decline-modal').find('.btn-void-transaction').addClass("btn-danger").removeClass("btn-success");
                        }

                        if (actionType.toLowerCase() === 'void') {
                            var temp = document.getElementById('voidReason');
                            var clone = temp.content.cloneNode(true);
                            $('#decline-modal').find('.btn-void-transaction').addClass("btn-danger").removeClass("btn-success");
                        }

                        if(actionType.toLowerCase() === 'confirm'){
                            var temp = document.getElementById('confirmReason');
                            var clone = temp.content.cloneNode(true);
                            $('#decline-modal').find('.btn-void-transaction').addClass("btn-success").removeClass("btn-danger");
                        }

                        container.appendChild(clone);
                    }

                    $('#decline-modal').trigger('changeData', [null]);
                    $('#decline-modal').find('.btn-void-transaction').attr('data-submit-action-id', $(submitButton).attr('id'));
                    $('#decline-modal').find('.btn-void-transaction').attr('data-submit-action-label', actionType.toLowerCase());
                    $('#decline-modal').find('.btn-void-transaction').html(actionType);
                    $('#decline-modal').find('.void-or-decline').html(actionType.toLowerCase());
                    $('#decline-modal').modal('show');

                } else {
                    $('#{{ form.vars.id }}').trigger('form:submit', [submitButton]);
                }
            });
        });
    </script>
{% endblock _Transaction_javascript %}
