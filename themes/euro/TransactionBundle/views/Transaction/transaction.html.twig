{% extends 'AppBundle:Layout:base.html.twig' %}

{% block title %}{{ "tag.create_title"|trans({}, 'TransactionBundle') }} - {{ ('types.' ~ type)|trans({}, 'TransactionBundle')  }}{% endblock title %}

{% block stylesheet_plugins %}
    <link rel="stylesheet" type="text/css" href="{{ asset("assets/plugins/magnific-popup/css/magnific-popup.css") }}" />

    {{ form_assetcss(form) }}
{% endblock %}

{% block stylesheets %}
    {{ form_stylesheet(form) }}
    <style type="text/css">
        .select2-container--disabled .select2-selection {
            background-color: rgba(0,0,0,0)!important;
        }
    </style>
{% endblock %}

{% block pageTitle %}{{ "page.create_title"|trans({'{type}': ('types.' ~ type)|trans({}, 'TransactionBundle')}, 'TransactionBundle') }}{% endblock pageTitle %}

{% block pageHeaderExtra %}
    <div class="pull-right">
        {% if is_granted('ROLE_TRANSACTION_VIEW') %}
        <a class="btn btn-inverse waves-effect waves-light pull-right m-b-10" href="{{ path("transaction.list_page") }}">
            <i class="ti-arrow-left m-r-10"></i>{{ "Back to Transaction List"|trans({}, 'TransactionBundle') }}
        </a>
        {% endif %}
        <ul class="list-inline quicklinks font-13 font-normal text-right">
            <li>Quick Links:</li>
            {% if is_granted('ROLE_TRANSACTION_CREATE') %}
            <li><a href="{{ path("transaction.create_page", {'type': 'deposit'}) }}">Deposit</a></li>|
            {% endif %}
            {% if is_granted('ROLE_TRANSACTION_CREATE') %}
            <li><a href="{{ path("transaction.create_page", {'type': 'withdraw'}) }}">Withdrawal</a></li>|
            {% endif %}
        </ul>
    </div>

{% endblock pageHeaderExtra %}

{% block breadcrumb -%}
    <li>
        <a href="{{ path("app.dashboard_page") }}">{{ "menus.Dashboard"|trans({},"AppBundle") }}</a>
    </li>
    <li>
        <a href="{{ path("transaction.list_page") }}">{{ "breadcrumb.text"|trans({},"TransactionBundle") }}</a>
    </li>
    <li class="active">
        {{ "breadcrumb.create"|trans({},"TransactionBundle") }}
    </li>
{%- endblock %}

{% block page %}
    {{ form_start(form) }}
        <div id="decline-modal" class="modal fade" tabindex="-1" style="display: none;" data-keyboard="false" data-backdrop="static">
            <div class="modal-dialog" style="width:45%;">
                <div class="modal-conten p-0 b-0t">
                    <div class="panel panel-color panel-inverse">
                        <div class="panel-heading">
                            <h3 class="panel-title"><span class="label label-primary m-r-10">{{ form.vars.value.getTypeText() }}</span> {{ form.vars.value.number }}</h3>
                        </div>
                        {% include "TransactionBundle:Form:void-form.html.twig" with {form:form} %}
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">{{ block("left_pane") }}</div>
        <div class="col-md-5">{{ block("middle_pane") }}</div>
        <div class="col-md-4 summary-parent-wrap">{{ block("right_pane") }}</div>
    {{ form_end(form) }}
{% endblock page %}

{% block left_pane %}
    {{ block('customer') }}
    {{ block('paymentOption') }}
    {{ block('paymentOptionOnTransaction') }}
    {{ block('gateway') }}
    {{ block('adjustment') }}
    {{ block('file') }}
{% endblock left_pane %}

{% block middle_pane %}
    <div class="card-box">
        <div class="card-box">
            <div class="row">
                {{ form_row(form.number) }}
                {{ form_row(form.date) }}
                {{ form_row(form.currency) }}
                {% if transaction.isTransactionPaymentBitcoin() %}
                    <div class="col-sm-12 btc-deposit-address">
                        <div class="form-group">
                            <label class="control-label">Bitcoin Address</label>
                            <div class="input-group">
                                <span class="input-group-addon"><strong>{{ "fields.receiverAddress"|trans({},'TransactionBundle') }}</strong></span>
                                {{ form_widget(form.receiverAddress) }}
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="form-group"><label class="control-label" for="Transaction_deposit_request_rate">Deposit Request Rate</label>
                            <div class="input-group" id="deposit-request-range-wrap">
                                <div>
                                    <input type="text" class="form-control" value="1" disabled="disabled">
                                    <span class="currency">BTC</span>
                                </div>
                                <span class="input-group-addon bg-inverted b-0">=</span>
                                <div id="Transaction_deposit_request_rate" name="Transaction[deposit_request_rate]">
                                    <input type="text" class="form-control" class="form-control" disabled="disabled" value="{{ transaction.getBitcoinRate() }}">
                                    <span class="currency">{{transaction.getCurrency().getName()}}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                {% endif %}
            </div>

            <div class="row hide" id="bitcoinFields">
                <div class="col-sm-12 btc-deposit-address">
                    <div class="form-group m-b-5">
                        <label class="control-label">Bitcoin Address</label>
                        <div class="input-group">
                            <span class="input-group-addon"><strong>{{ "fields.receiverAddress"|trans({},'TransactionBundle') }}</strong></span>
                            {{ form_widget(form.details.bitcoin.receiver_unique_address) }}
                        </div>
                        <span class="help-block"><ul></ul></span>
                    </div>
                </div>
                <div class="col-sm-12">
                    <div class="form-group"><label class="control-label" for="Transaction_details_deposit_request_rate">{{ "fields.depositRequestRate"|trans({},'TransactionBundle') }}</label>
                        <div class="input-group" id="deposit-request-range-wrap">
                            <div>
                                <input type="text" class="form-control" value="1" disabled="disabled">
                                <span class="currency">BTC</span>
                            </div>
                            <span class="input-group-addon bg-inverted b-0">=</span>
                            <div id="Transaction_deposit_request_rate" name="Transaction[deposit_request_rate]">
                                {{ form_widget(form.details.bitcoin.rate) }}
                                <span class="currency">EURO</span>
                            </div>
                        </div>
                        <span class="help-block"><ul></ul></span>
                    </div>
                </div>
            </div>
        </div>
        {{ form_row(form.subTransactions) }}
        {% if transaction.isDeposit() or transaction.isWithdrawal() %}
            <div class="card-box">
        {% else %}
            <div class="card-box hide">
        {% endif %}
                <div class="row">
                    {{ form_row(form.customerFee) }}
                    {{ form_row(form.companyFee) }}
                </div>
            </div>
        {% if not transaction.hasBitcoinDepositAndNotConfirmed() %}
        <div class="card-box">
            <div class="row">
                {% if transaction.isEnd() and transaction.isVoided() %}
                    {{ form_row(form.notes, {'view': true}) }}
                {% else %}
                    {{ form_row(form.notes) }}
                {% endif %}
                {% if transaction.isDeclined() or transaction.isVoided() %}
                    {{ form_row(form.reasonToVoidOrDecline, {'view': true}) }}
                {% elseif transaction.getVoidingReason() %}
                    {{ form_row(form.confirmationReason, {'view': true}) }}
                {% endif %}
            </div>
        </div>
        {% else %}
        <div class="card-box">
            <div class="row">
                {% if transaction.isDeclined() or transaction.isVoided() %}
                    {{ form_row(form.reasonToVoidOrDecline, {'view': true}) }}
                {% elseif transaction.getVoidingReason() %}
                    {{ form_row(form.confirmationReason, {'view': true}) }}
                {% endif %}
            </div>
        </div>
        {% endif %}
        {% if (not transaction.hasBitcoinDepositAndNotConfirmed()) or (transaction.isStart() and transaction.isPaymentBitcoin()) %}
            {% if form.actions.children | length > 0 %}
                <div class="row">
                    {{ form_row(form.actions) }}
                </div>
            {% else %}
                {{ form_row(form.actions) }}
            {% endif %}
        {% endif %}
    </div>
{% endblock middle_pane %}

{% block _Transaction_subTransactions_row %}
    <div class="card-box" id="{{ form.vars.id }}">
        <h4 class="header-title m-b-30 m-t-0">
            Products
            {%- if form.vars.addSubtransaction -%}
            &nbsp;&nbsp;|<button type="button" class="btn btn-success btn-xs btn-add-product btn-icon m-l-10"><i class="fa fa-plus" title="Add Product"></i></button>
            {% else %}
                <button type="button" class="btn btn-success btn-xs btn-add-product hide">
            {%- endif %}
        </h4>
        <div class="product-list">
        </div>
    </div>
{% endblock %}

{% block right_pane %}
    <div class="summary-inner-wrap">
        <i class="summary-holder ti ti-receipt visible-xs"></i>
        <div id='summary'>
        </div>
    </div>
{% endblock right_pane %}

{% block summary_template %}
{% endblock %}

{% block file %}
    {% if transaction.isDeposit() and transaction.hasFile %}
        <div class="card-box">
            <h4 class="m-t-0 m-b-30 header-title">{{ "Proof of Deposit"|trans({},'TransactionBundle') }}</h4>

            <div class="image-container">
                {% if transaction.isFileViewable %}
                    {% set renderFile = path('app.render_file', { 'fileName' : transaction.filename, 'folder' : transaction.fileFolder })|raw %}
                    <a class="deposit-slip-image" href="{{ renderFile }}" title="{{ transaction.filename }}">
                        <img src="{{ renderFile }}"/><br>
                    </a>
                    <strong>{{ transaction.filename }}</strong>
                {% else %}
                    <span>Attachment already expired.</span>
                    <strong>{{ transaction.filename }}</strong>
                {% endif %}
            </div>
        </div>
    {% endif %}
{% endblock file %}

{% block customer %}
    <div class="card-box" id='customer-container'>
        <h4 class="m-t-0 m-b-30 header-title">{{ "Member"|trans({},'TransactionBundle') }}</h4>
        <div class="form-group {% if form.customer.vars.errors|length > 0 %} has-error {% endif %}">
            {{ form_widget(form.customer) }}
            {{ form_errors(form.customer) }}
        </div>

        <div class="text-muted">
            <div class="row m-t-10">
                <div class="col-md-3 col-sm-3 col-xs-3 text-right"><b>Username:</b></div>
                <div class="col-md-8 col-sm-8 col-xs-8 m-l-15 customer-data" data-field="user.username"></div>
            </div>
            <div class="row m-t-10">
                <div class="col-md-3 col-sm-3 col-xs-3 text-right"><b>Groups:</b></div>
                <div class="col-md- col-sm-8 col-xs-8 m-l-15 customer-data" data-field="groups"></div>
            </div>
        </div>
    </div>
{% endblock customer %}

{% block paymentOption %}
    {% if transaction.isDeposit() or transaction.isWithdrawal() %}
    <div class="card-box" id='payment-option-container'>
    {%  else %}
    <div class="card-box hidden" id='payment-option-container'>
    {%  endif %}
        {% set label = form.immutablePaymentOptionOnTransactionData is defined ? "Payment Option on Record" : "Payment Option" %}
        <h4 class="m-t-0 m-b-30 header-title">{{ label|trans({}, 'TransactionBundle') }}</h4>
        <div class="form-group">
            <div class="row">
                <div class="col-md-12">
                    {% if form.paymentOption is defined and transaction.isClosedForFurtherProcessing == false %}
                        {{ form_widget(form.paymentOption, {'attr': {'disabled': 'disabled'}}) }}
                        {{ form_errors(form.paymentOption) }}
                    {% endif %}
                    {% if form.immutablePaymentOptionData is defined and transaction.isClosedForFurtherProcessing == true %}
                        {{ form_widget(form.immutablePaymentOptionData, {'attr': {'disabled': 'disabled'}}) }}
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
{% endblock paymentOption %}

{% block paymentOptionOnTransaction %}
    {% if form.immutablePaymentOptionOnTransactionData is defined %}
        <div class="card-box" id='payment-option-on-transaction-container'>
            <h4 class="m-t-0 m-b-30 header-title">{{ "Payment Option on Transaction"|trans({}, 'TransactionBundle') }}</h4>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-12">
                        {{ form_widget(form.immutablePaymentOptionOnTransactionData, {'attr': {'disabled': 'disabled'}}) }}
                    </div>
                </div>
            </div>
        </div>
    {% endif %}
{% endblock %}

{% block gateway %}
    {% if form.gateway is defined %}
        <div class="card-box" id="gateway-container">
            <h4 class="m-t-0 m-b-30 header-title">{{ "Payment Gateway"|trans({},'TransactionBundle') }}</h4>
            <div class="form-group {% if form.gateway.vars.errors|length > 0 %} has-error {% endif %}">
                {{ form_widget(form.gateway, {'attr': {'disabled': 'disabled'}}) }}
                {{ form_errors(form.gateway) }}
            </div>
        </div>
    {% endif %}
{% endblock gateway %}

{% block adjustment %}
    {% if form.adjustment is defined %}
        <div class="card-box" id="adjustment-container">
            <h4 class="m-t-0 m-b-30 header-title">{{ "Transaction"|trans({},'TransactionBundle') }}</h4>
            <div class="form-group {% if form.adjustment.vars.errors|length > 0 %} has-error {% endif %}">
                {{ form_widget(form.adjustment, {'attr': {'disabled': 'disabled'}}) }}
                {{ form_errors(form.adjustment) }}
            </div>
        </div>
    {% endif %}
{% endblock adjustment %}

{% block javascript_plugins %}
    {{ form_assetjs(form) }}
{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="{{ asset("bundles/app/js/equation_parser.js") }}"></script>
    <script type="text/javascript" src="{{ asset("bundles/app/js/currency_exchangeRate.js") }}"></script>
    <script type="text/javascript" src="{{ asset("assets/plugins/magnific-popup/js/jquery.magnific-popup.min.js") }}"></script>
    <script type="text/javascript" id="summaryScript">
        var transactionData = {{ form.vars.data|serialize('json', serialization_context().setSerializeNull(true).setGroups(['Default', 'details']))|raw }};

        // reload page if accessed from history (to regen transaction#)
        if (!!window.performance && window.performance.navigation.type === 2) {
            // value 2 means "The page was accessed by navigating into the history"
            window.location.reload();
        }

        $('.deposit-slip-image').magnificPopup({
            type: 'image',
            closeOnContentClick: true,
            mainClass: 'mfp-img-mobile'
        });

        var eparse = new EqParse();
        var SummaryObject = function(data, options) {
            this.data = data;
            this.options = options;
        }

        function resetBitcoinFields(memberPaymentOptionText) {
            $('#{{form.details.bitcoin.rate.vars.id}}').val('');
            $('#{{form.details.bitcoin.receiver_unique_address.vars.id}}').val(memberPaymentOptionText);
        }

        function removeBitcoinErrors() {
            $('#bitcoinFields').find('.form-group').removeClass('has-error');
            $('#bitcoinFields').find('.help-block ul li').remove();
        }

        function loadBitcoinFields(memberPaymentOptionText) {
            $('#bitcoinFields').removeClass('hide');
            removeBitcoinErrors();
            resetBitcoinFields(memberPaymentOptionText);
        }

        function unloadBitcoinFields() {
            $('#bitcoinFields').addClass('hide');
            resetBitcoinFields();
        }

        SummaryObject.prototype.process = function(forceProcess) {
            forceProcess = forceProcess || false;
            var sum = {
                'product': new Decimal(0),
                'deposit': new Decimal(0),
                'withdraw': new Decimal(0)
            };
            var total = {
                'customerFee': new Decimal(0),
                'companyFee': new Decimal(0),
                'amount': new Decimal(0),
                'customer': new Decimal(0)
            };
            for(var i in this.data.subtransactions) {
                var subtransaction = this.data.subtransactions[i];
                subtransaction.fees = subtransaction.fees || {};
                sum.product = sum.product.plus(subtransaction.amount || 0);
                if (subtransaction.type == 2) {
                    sum.withdraw = sum.withdraw.plus(subtransaction.amount || 0);
                } else if (subtransaction.type == 1) {
                    sum.deposit = sum.deposit.plus(subtransaction.amount || 0);
                }

                total.customerFee = total.customerFee.plus(subtransaction.fees.customerFee || 0);
                total.companyFee = total.companyFee.plus(subtransaction.fees.companyFee || 0);
            }

            total.customerFee = total.customerFee.plus(this.data.fees.customerFee || 0);
            total.companyFee = total.companyFee.plus(this.data.fees.companyFee || 0);
            var values = {
                'sum_products': sum.product.toFixed(2,1),
                'sum_withdraw_products': sum.withdraw.toFixed(2,1),
                'sum_deposit_products': sum.deposit.toFixed(2,1),
                'total_customer_fee': total.customerFee.toFixed(2,1),
                'total_company_fee': total.companyFee.toFixed(2,1),
                'company_fee': (new Decimal(this.data.fees.companyFee || 0)).toFixed(2,1),
                'customer_fee': (new Decimal(this.data.fees.customerFee || 0)).toFixed(2,1)
            };

            total.amount = 0;
            total.customer = 0;
            if (this.options.equations != null) {
                total.amount = this.processEquation(this.options.equations.totalAmount.equation, this.options.equations.totalAmount.variables, values);
                total.customer = this.processEquation(this.options.equations.customerAmount.equation, this.options.equations.customerAmount.variables, values);
            }
            values['total_amount'] = (new Decimal(total.amount)).toFixed(2,1);
            values['customer_amount'] = (new Decimal(total.customer)).toFixed(2,1);
            values['status'] = this.options.status;

            if (typeof this.data.bet != 'undefined') {
                values['bet_id'] = this.data.bet.id;
                values['bet_details'] = (this.data.bet.details).replace(new RegExp("&lt;br /&gt;", "g"),'\n');
                values['reason'] = this.data.reason;
            }

            if(this.options.equations != null && typeof this.options.equations.gateway != 'undefined' && typeof this.data.gateway != 'undefined') {
                var vr = {};
                for(var i in this.options.equations.gateway.variables) {
                    var vv = this.options.equations.gateway.variables[i];
                    vr[vv.var] = vv.value;
                }
                this.data.gateway.afterbalance = (new Decimal(this.processEquation(this.data.gateway.balance + this.options.equations.gateway.equation, vr, values))).toFixed(2,1);
            }

            this.data = $.extend(true, this.data, values);
            return values;
        }

        SummaryObject.prototype.processEquation = function(equation, vars, predefineValues) {
            vars = vars || {};
            var vr = {};
            for(var i in vars) {
                if (typeof predefineValues[vars[i]] != 'undefined') {
                    vr[i] = predefineValues[vars[i]];
                } else {
                    vr[i] = vars[i]
                }
            }
            return eparse.parse(equation, vr, true);
        }

        SummaryObject.prototype.getAll = function() {
            return this.data;
        }

        SummaryObject.prototype.getField = function(key) {
            var data = this.data;
            var arr = key.split('.');

            for(var i = 0; i < arr.length; i++){
                data = data[arr[i]] != undefined ? data[arr[i]] : '';
            }

            return data;
        };

        SummaryObject.prototype.removeField = function(key) {
            var parts = key.split('.');
            var strPart = "['" + parts.join("']['") + "']";
            eval("delete this.data" + strPart + ";");
        };

        SummaryObject.prototype.loopSet = function(key, value) {
            var data = {};
            var arr = key.split('.',2);
            if(arr.length > 1) {
                data[key] = this.loopSet(arr[1], value);
            } else {
                data[key] = value;
            }
            return data;
        };
        SummaryObject.prototype.setField = function(key, value) {
            var arr = key.split('.',2);
            var _data  = {};
            if(arr.length > 1) {
                _data[arr[0]] = this.loopSet(arr[1], value);
            } else {
                _data[arr[0]] = value;
            }
            this.data = $.extend(true, this.data, _data);
        };

        var transactionInfo = new SummaryObject({
            'number': "{{ form.number.vars.value }}",
            'statusInfo': {{ (setting('transaction.status.' ~ transaction.status, {})|merge({"id": transaction.status}))|json_encode()|raw }},
            'voided': {{ transaction.isVoided == 0 ? '0' : '1'  }},
            'subtransactions': [],
            'pinnacletransacted': {{ pinnacleTransacted ? '1' : '0'  }},
            'fees': {
                'customerFee': {{ form.customerFee.vars.value|default(null) == null ? "null" : form.customerFee.vars.value }},
                'companyFee': {{ form.companyFee.vars.value|default(null) == null ? "null" : form.companyFee.vars.value }}
            },
            'immutable': {
                'customer': {{ (transaction.details.customer|default([]))|json_encode()|raw  }}
            },
            'details': {{ (transaction.details|default([]))|json_encode()|raw }}
        }, {
            'status': {{ form.vars.data.status  }},
            'equations': {{ setting('transaction.equations.' ~ (app.request.get('type')), false)|json_encode()|raw }}
        });

        var summaryTemplate = "{{ block('summary_template')|escape('js') }}";
        summaryTemplate = new XslTemplate(summaryTemplate, false);

        function applySummary() {
            transactionInfo.process();
            var _temp = $("<div></div>").html(summaryTemplate.apply(json2Xml(transactionInfo.getAll(), "transaction"))).html();
            $('#summary').html(_temp);
        }

        function addSummaryInfo(index, value) {
            transactionInfo.setField(index, value);
        }

        function removeSummaryInfo(index) {
            transactionInfo.removeField(index);
        }

        applySummary();



    </script>
    {{ form_javascript(form) }}
{% endblock javascripts %}

{% block _Transaction_date_javascript %}
    {% if widget == 'single_text'%}
        {% set view = view|default(false) %}
        {% if not view %}
            <script type="text/javascript">
                $(function(){
                    var defaultDate = moment('{{ value }}', 'MM/DD/YYYY h:mm:ss A').toDate();
                    var maxDate = moment().add(5, 'seconds').toDate();
                    $('#{{ id }}').datetimepicker({
                        'format': 'MM/DD/YYYY h:mm:ss A',
                        'widgetPositioning': {
                            'horizontal': '{{ widget_option.position.horizontal|default('auto') }}',
                            'vertical': '{{ widget_option.position.vertical|default('top') }}'
                        },
                        'useCurrent': false,
                        'defaultDate': defaultDate,
                    });
                });
            </script>
        {% endif %}
    {% endif %}
{% endblock %}