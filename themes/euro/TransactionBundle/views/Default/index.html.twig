{% extends 'AppBundle:Layout:base.html.twig' %}

{% block title %}{{ "tag.list_title"|trans({},"TransactionBundle") }}{% endblock %}

{% block stylesheet_plugins %}
    <!-- DataTables -->
    {{ asset_add('css', asset('assets/plugins/select2/css/select2.min.css')) }}
    {{ asset_add('css',asset("assets/plugins/bootstrap-datepicker/css/bootstrap-datepicker.min.css")) }}
    {{ asset_add('css',asset("assets/plugins/bootstrap-select/css/bootstrap-select.min.css")) }}
    <link href="{{ asset('assets/plugins/datatables/jquery.dataTables.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/buttons.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/responsive.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/dataTables.colVis.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/dataTables.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    {{ asset_render('css') }}
{% endblock %}

{% block stylesheets %}
{% endblock stylesheets %}

{% block pageTitle -%} {{ "menus.Transaction"|trans({},"TransactionBundle") }} {%- endblock pageTitle %}

{% block pageHeaderExtra %}
    <div class="pull-right">
        <div class="btn-group pull-right">
            {% if is_granted('ROLE_TRANSACTION_CREATE') %}
            <button type="button" class="btn btn-primary dropdown-toggle waves-effect waves-light pull-right" data-toggle="dropdown" aria-expanded="false">Transact <span class="ti-angle-down m-l-10"></span></button>
            {% endif %}
            <ul class="dropdown-menu pull-right" role="menu">
                <li><a href="{{ path("transaction.create_page", {'type': 'deposit'}) }}">{{ "menus.Deposit"|trans({},"TransactionBundle") }}</a></li>
                <li><a href="{{ path("transaction.create_page", {'type': 'withdraw'}) }}">{{ "menus.Withdraw"|trans({},"TransactionBundle") }}</a></li>                
            </ul>
        </div>
        <ul class="list-inline quicklinks font-13 font-normal text-right m-t-10">
            <li>{{ "quicklinks.name"|trans({},"TransactionBundle") }}:</li>
            {% if is_granted('ROLE_PRODUCT_VIEW') %}
            <li><a href="{{ path("product.list_page") }}">{{ "quicklinks.product"|trans({},"TransactionBundle") }}</a></li>|
            {% endif %}
            {% if is_granted('ROLE_CUSTOMER_VIEW') %}
            <li><a href="{{ path("member.list_page") }}">{{ "Member List"|trans({},"MemberBundle") }}</a></li>|
            {% endif %}
            {% if is_granted('ROLE_CUSTOMER_GROUP_VIEW') %}
            <li><a href="{{ path("customer.group_list_page") }}">{{ "quicklinks.memberGroup"|trans({},"TransactionBundle") }}</a></li>|
            {% endif %}
            {% if is_granted('ROLE_TRANSACTION_VIEW') %}
            <li><a href="{{ path("transaction.list_page", {'filter': 'pending'}) }}">{{ "quicklinks.pendingTransaction"|trans({},"TransactionBundle") }}</a></li>
            {% endif %}
        </ul>
    </div>
{% endblock pageHeaderExtra %}

{% block breadcrumb -%}
    <li>{{ "breadcrumb.transaction"|trans({},"AppBundle") }}</li>
    <li class="active">{{ "breadcrumb.list"|trans({},"TransactionBundle") }}</li>
{%- endblock breadcrumb %}

{% block page %}
    <div class="col-sm-12">
        <div class="card-box">
            <div id="transactionList">
                <table id="datatable-responsive"
                    class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0"
                    width="100%">
                    <thead>
                        <tr>
                            <th data-priority="1">{{ "fields.number"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.date"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.member"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.productUsername"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.paymentOption"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.currency"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.memberFee"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.companyFee"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.amount"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.status"|trans({}, "TransactionBundle") }}</th>
                            <th>{{ "fields.type"|trans({}, "TransactionBundle") }}</th>
                            <th data-priority="2">{{ "fields.action"|trans({}, "TransactionBundle") }}</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot></tfoot>
                </table>
            </div>
        </div>
        </div>
{% endblock page %}

{% block modals -%}
    <div id="formModal" class="modal fade" tabindex="-1" style="display: none;" data-keyboard="false" data-backdrop="static">
        <div class="modal-dialog" style="width:45%;">
            <div class="modal-conten p-0 b-0t">
                <div class="panel panel-color panel-inverse">
                    <div class="panel-heading">
                        <h3 class="panel-title"><span class="label label-primary m-r-10">&nbps;</span>&nbsp;</h3>
                    </div>
                    {% include "TransactionBundle:Form:void-list-form.html.twig" %}
                </div>
            </div>
        </div>
    </div>
{%- endblock modals %}

{% block javascript_plugins %}
    <script src="{{ asset('bundles/app/js/ZTable.js') }}"></script>
    {{ asset_add('js', asset('assets/plugins/select2/js/select2.min.js')) }}
    {{ asset_add('js',asset('assets/plugins/bootstrap-select/js/bootstrap-select.min.js')) }}
    {{ asset_add('js',asset('assets/plugins/bootstrap-select/js/bootstrap-select-ajax.js')) }}
    {{ asset_add('js',asset("assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js")) }}
    <script src="{{ asset('assets/plugins/datatables/jquery.dataTables.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.bootstrap.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.buttons.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/buttons.bootstrap.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/vfs_fonts.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/buttons.html5.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.responsive.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/responsive.bootstrap.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.colVis.js') }}"></script>
    {{ asset_render('js') }}
{% endblock %}

{% block javascripts %}
    <script type="text/javascript" >
        var statuses = {{ statuses|json_encode()|raw }};
        var userPreferences = {{ app.user.getPreference('ui.transaction.list.column.visibility')|json_encode()|raw }};
        var filter = {{ filter|json_encode()|raw }};
        var nonPendingStatuses = {{ nonPendingStatuses|json_encode()|raw }};
        var statusChoices = {};
        var report = {
            'exportUrl': '{{ path('transaction.download') }}',
            'filters': filter
        };
        var voidLink = '';

        if (nonPendingStatuses.length === 0 ) {
            for (var i in statuses) {
                if (filter != '') {
                    if ($.inArray(i, filter.filters.excludeStatus) == -1 && statuses[i].label.toLowerCase() != 'voided' ) {
                        statusChoices[i] = statuses[i].label;
                    }
                }  else {
                        statusChoices[i] = statuses[i].label;
                }
            }
        } else {
            for (var i in nonPendingStatuses) {
                statusChoices[i] = nonPendingStatuses[i].label;
            }
        }
        $(function(){
            var listTable = new ZTable('#transactionList',  {
                'colvis': {
                    'hidden': function () {
                        var hidden = [];
                        for (var i in userPreferences) {
                            if (userPreferences[i] == 'false') {
                                hidden.push(eval(i));
                            }
                        }

                        return hidden;
                    },
                    'exclude': ['number', 'customer.full_name']
                },
                'search': '{{ app.request.get("search", '') }}',
                'featuresDom': "<'form-inline'"
                    + "<'form-group m-r-10 ft-date'<'xs-date'ft>>"
                    + "poyrsxd"
                    + "<'form-group form-group-sm m-r-10 xs-filter' b>>"
                    + "<'form-group form-group-sm m-r-10' c>>",
                'ajax': {
                    'url': '{{ path("transaction.list_search") }}',
                    'data': function (data, dataTable) {
                        data.isDataTableTransaction = true;
                        report.filters = window.lodash.merge(data.filters, filter.filters);

                        return data;
                    },
                    'dataFilter': function (str) {
                        var draw = this.draw;
                        var json = $.parseJSON( str );

                        return JSON.stringify({
                            'draw': draw,
                            'data': json.records,
                            'recordsFiltered': json.recordsFiltered,
                            'recordsTotal': json.recordsTotal
                        });
                    }
                },
                'attrs': {
                    'colvisButton' : {
                        'data-style': 'btn-primary'
                    }
                },
                'features': {
                    'btnExportCsv': {
                        'type': 'button',
                        'label': 'Export to CSV',
                        'symbol': 'c',
                        'attrs': {
                            'type': 'button',
                            'class': 'btn btn-sm btn-inverse hidden'
                        },
                        'initialized': function (feature) {
                        },
                        'rendered': function (feature) {
                            $(feature.input).click(function() {
                                var query = {
                                    'filters': report.filters
                                }
                                window.open(report.exportUrl + '?' + $.param(query), '_blank');
                            });
                        }
                    },
                    'from': {
                        'dom': "<'form-group form-group-sm m-r-10'<'input-group'i<^span 'input-group-addon bg-white text-inverse'<!'fa fa-calendar'!>>>>",
                        'type': 'date',
                        'label': 'From',
                        'symbol': 'f',
                        'attrs': {
                            'placeholder': 'From'
                        },
                        'applyOnChanged': false,
                        'value': '{{ app.request.get("from", '') }}'
                    },
                    'to': {
                        'dom': "<'form-group form-group-sm m-r-10'<'input-group'i<^span 'input-group-addon bg-white text-inverse'<!'fa fa-calendar'!>>>>",
                        'type': 'date',
                        'label': 'To',
                        'symbol': 't',
                        'attrs': {
                            'placeholder': 'To'
                        },
                        'applyOnChanged': false,
                        'value': '{{ app.request.get("to", '') }}'
                    },
                     'applyFilter': {
                        'type': 'button',
                        'label': 'Apply Filter',
                        'symbol': 'd',
                        'attrs': {
                            'type': 'button',
                            'class': 'btn btn-sm btn-default'
                        },
                        'initialized': function (feature) {
                            $(feature.input).click(function () {
                                var from = $('#' + feature.ztable.features.from.id);
                                var to = $('#' + feature.ztable.features.to.id);

                                if (from.val() !== "" && to.val() !== "") {
                                    $('#' + feature.ztable.features.btnExportCsv.id).removeClass('hidden');
                                }

                                feature.ztable.forceReloadTable();
                            });
                        }
                    },
                    'resetFilter': {
                        'type': 'button',
                        'label': 'Reset Filter',
                        'symbol': 'b',
                        'attrs': {
                            'type': 'button',
                            'class': 'btn btn-sm btn-inverse'
                        },
                        'initialized': function (feature) {
                            $(feature.input).click(function () {
                                $('#' + feature.ztable.features.btnExportCsv.id).addClass('hidden');
                                $("select.ztable_length_input").val('10').change();
                                feature.ztable.reset();
                            });
                        }
                    },
                    'paymentOption': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'P.O',
                        'symbol': 'o',
                        'class': 'selectpicker',
                        'applyOnChanged': false,
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'title': 'Select Payment Options',
                            'data-selected-text-format': 'count > 3',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'waitByTable': true,
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'initialized': function (feature) {
                            $.ajax({
                                'url': '{{ path('paymentoption.search') }}',
                                'success': function (data) {
                                    var options = {};
                                    for (var i in data.data) {
                                        var option = $("<option value='" + data.data[i].code + "'>" + data.data[i].name + "</option>");
                                        if (feature.feature.value.indexOf(data.data[i].code + "") !== -1) {
                                            option.attr('selected', 'selected');
                                        }
                                        $(feature.input).append(option);
                                    }
                                    $(feature.input).selectpicker('refresh');
                                    feature.setToDone();
                                    feature.ztable.reloadTable();
                                }
                            });
                        },
                        'value': {{ app.request.get("paymentOption", [])|json_encode|raw }},
                    },
                    'types': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'Type',
                        'symbol': 'y',
                        'class': 'selectpicker',
                        'applyOnChanged': false,
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'title': 'Select Type',
                            'data-selected-text-format': 'count > 3',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'rendered': function (feature) {
                            $(feature.input).val(feature.feature.value);
                        },
                        'choices': {
                            'deposit': "Deposit",
                            'withdraw': "Withdraw",
                        },
                        'value': {{ app.request.get("type", [])|json_encode|raw }}
                    },
                    'source': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'Type',
                        'symbol': 'r',
                        'class': 'selectpicker',
                        'applyOnChanged': false,
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'title': 'Select Source',
                            'data-selected-text-format': 'count > 3',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'rendered': function (feature) {
                           $(feature.input).val(feature.feature.value);
                        },
                        'choices': {
                            'member': "Member Site",
                            'admin': "Back Office"
                        },
                        'value': ''
                    },
                    'status': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'Member Status',
                        'symbol': 's',
                        'class': 'selectpicker',
                        'applyOnChanged': false,
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'data-none-selected-text': 'Select Status',
                            'data-width': 'auto',
                            //'data-selected-text-format': 'count > 1'
                        },
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'rendered': function (feature) {
                            $(feature.input).val(feature.feature.value);
                        },
                        'choices': statusChoices,
                        'value': {{ app.request.get("status", [])|json_encode|raw }}
                    }
                },
                'columns': [
                    {
                        'data': 'number',
                        'defaultContent': '',
                        'name': 'number',
                        'responsivePriority': 1,
                        'render': function (data, type, full) {
                            var numberOutput = "<a href='" + full._link.page + "' target='_blank'>" + data + "</a>";
                            if (full.was_created_from_ams === true) {
                                numberOutput += "<span class='label label-inverse m-l-5'>AMS</span>";
                            }

                            return numberOutput;
                        }
                    },
                    {
                        'name': 'date',
                        'data': 'date',
                        'defaultContent': '',
                        'render': function (data, type, full) {
                            return moment(data).format('MMM D, YYYY h:mm A');
                        }
                    },
                    {
                        'name': 'customer.full_name',
                        'data': 'customer.full_name',
                        'render': function (data, type, full) {
                            if (data === '') {
                                return full.customer.user.username;
                            }

                            return data;
                        }
                    },
                    {
                        'data': 'sub_transactions',
                        'defaultContent': '',
                        'name': 'sub_transactions',
                        'render': function (data, type, full) {

                            if (data === null) {
                                return '';
                            }

                            var productUsername = '';
                            $.each(data , function(key,val) {
                                var customerProductUserName = val.immutable_customer_product_data === '' ? val.customer_product.username : val.immutable_customer_product_data;
                                productUsername  += '&nbsp;' + val.customer_product.product.name + '(' + customerProductUserName + '),';
                            });

                            productUsername = productUsername.replace(/,*$/, "");
                            productUsername = productUsername.split(",");
                            var moreThan = '';
                            $i = 1;
                            if (productUsername.length > 2) {

                                $.each(productUsername , function(key,val) {
                                    moreThan  += val + ',';
                                    if ($i == 2) {
                                        productUsername = moreThan;
                                    }
                                    $i++;
                                });
                                productUsername = productUsername.replace(/,*$/, "...");
                            }

                            return productUsername;
                        }
                    },
                    {
                        'data': 'immutable_payment_option_data',
                        'defaultContent': '',
                        'name': 'payment_option',
                        'render': function (immutable_payment_option_data) {
                            if (immutable_payment_option_data == null) {
                                return '';
                            }

                            return immutable_payment_option_data.ellipsis(30);
                        }
                    },
                    { 'data': 'currency.code', 'defaultContent': '' },
                    {
                        'data': 'customer_fee',
                        'defaultContent': '',
                        'render': function (data, type, full) {
                            return (new Decimal(data)).toFixed(2);
                        }
                    },
                    {
                        'data': 'company_fee',
                        'defaultContent': '',
                        'render': function (data, type, full) {
                            return (new Decimal(data)).toFixed(2);
                        }
                    },
                    {
                        'name': 'amount',
                        'data': 'customer_amount',
                        'defaultContent': '',
                        'render': function (data, type, full) {
                            if (full.type_text === 'withdraw') {
                                var amount = new Number(data);
                                var fee = new Number(full.customer_fee);
                                amount += fee;

                                return amount.toFixed(2);
                            } else if (full.type_text === 'bet') {
                                var betAmount = new Number(full.amount);

                                return betAmount.toFixed(2);
                            } else if (full.is_transaction_payment_bitcoin === true) {
                                var btcTotalAmount = new Number(full.bitcoin_total_amount);
                                if (full.type_text === 'deposit' && btcTotalAmount != '0') {
                                    var btcAmount = new Number(full.bitcoin_total_amount);
                                    return data + ' (' + btcAmount.toFixed(5) + ' BTC)';
                                }
                                
                                return data;
                            } else if (full.type_text === 'dwl') {
                                var subtransaction = full.sub_transactions[0];
                                if (subtransaction.brokerage_win_loss != null) {
                                    return (new Decimal(subtransaction.brokerage_win_loss)).toFixed(2);
                                }
                            }

                            return (new Decimal(data)).toFixed(2);
                        }
                    },
                    {
                        'data': 'status',
                        'defaultContent': '',
                        'name': 'status',
                        'render': function(data, type, full) {
                            var label = data.label;

                            if (full.is_bitcoin_status_pending_confirmation == true) {
                                label = "{{ "pending_confirmation"|trans({}, "TransactionBundle") }}";
                            } else if (full.is_bitcoin_status_confirmed == true) {
                                label = "{{ "confirmed"|trans({}, "TransactionBundle") }}";
                            }

                            if (full.is_voided) {
                                label = "{{ "voided"|trans({}, "TransactionBundle") }}";
                            }

                            return label;
                        }
                    },
                    {
                        'data': 'type_text',
                        'name': 'type',
                        'defaultContent': '',
                        'responsivePriority': 1,
                        'render': function(data, text, full) {
                            var typeText = {
                                'deposit': "{{ "types.deposit"|trans({}, "TransactionBundle") }}",
                                'withdraw': "{{ "types.withdraw"|trans({}, "TransactionBundle") }}",
                                'transfer': "{{ "types.transfer"|trans({}, "TransactionBundle") }}",
                                'bonus': "{{ "types.bonus"|trans({}, "TransactionBundle") }}",
                                'p2p_transfer': "{{ "types.p2p_transfer"|trans({}, "TransactionBundle") }}",
                                'dwl': "{{ "types.dwl"|trans({}, "TransactionBundle") }}",
                                'bet': "{{ "types.bet"|trans({}, "TransactionBundle") }}",
                                'commission': "{{ "types.commission"|trans({}, "TransactionBundle") }}",
                                'debit_adjustment': "{{ "types.debit_adjustment"|trans({}, "TransactionBundle") }}",
                                'credit_adjustment': "{{ "types.credit_adjustment"|trans({}, "TransactionBundle") }}"
                            };
                            if (data === 'dwl') {
                                if (typeof full.dwl != 'undefined') {
                                    return typeText[data] + ' - ' + moment(full.dwl.date).format('MMM D, YYYY');
                                }
                            }

                            return typeText[data];
                        }
                    },
                    {
                        'data': 'status',
                        'name': 'status',
                        'defaultContent': '',
                        'render': function(data, text, full) {
                            var view = "<a class='btn btn-primary waves-effect waves-light btn-xs hidden' href='" + full._link.page + "'>View</a>";
                            var voidWrap = "<a id='voidBtn' action='suspend' class='btn btn-danger waves-effect waves-light m-r-10 btn-xs active-state-action'>Void</a>";
                            var action = view;
                            {% if is_granted(['ROLE_TRANSACTION_UPDATE']) %}
                            if (full.is_voided == false &&  full.status.id == 2 && full.type != 6 && full.type != 8) {
                                action = action+ ' ' + voidWrap;
                            }
                            {% endif %}

                            return action;
                        }
                    }
                ],
                'ordering': true
            });

            $('#transactionList').on('ztable.change.column.visible', function (e, colvis, ztable) {
                saveUserPreferences({'ui.transaction.list.column.visibility': ztable.getColumnVisibility()});
            });

            $('.btn-void-transaction').click(function (e) {
                voidTransaction(voidLink + '/void');
            });

            $('#transactionList').on('click', 'tr td a#voidBtn', function (e) {
                e.preventDefault();
                var currentRow = $(e.target).closest('tr');
                if (currentRow.hasClass('child')) {
                    currentRow = currentRow.prev();
                }
                var data = listTable.dataTable.api().row(currentRow).data();
                var transactionType = data.type_text;
                var transactionNumber = data.number;
                var tdDate = '<dt>Transaction Date</dt><dd>'+ moment(data.date).format('YYYY/MM/DD') + '</dd>';
                var tdGateway = data.gateway != null ? '<dt>Payment Gateway</dt><dd>' + data.gateway.name + '</dd>' : '';
                var tdCustomer = '<dt>Member</dt><dd>'+ data.customer.full_name + '</dd>';
                var tdCustomerFee = '<dt>Member Fee</dt><dd>'+ data.currency.code + '&nbsp;' + data.customer_fee + '</dd>';
                var tdAmountDeposited = '<dt>Amount Deposited</dt><dd>'+ data.currency.code + '&nbsp;' + data.amount + '</dd>';

                var tdCompanyFee = '<dt>Company Fee</dt><dd>'+ data.currency.code + '&nbsp;' + data.company_fee + '</dd>';
                var tdCustomerAmountAvailable = '<dt>Company Fee</dt><dd>'+ data.currency.code + '&nbsp;' + data.customer_amount + '</dd>';

                $(".panel-title").html('<span class="label label-primary m-r-10">' + transactionType + '</span> ' + transactionNumber);
                $('.panel1').html(tdDate + tdGateway + tdCustomer + tdCustomerFee + tdAmountDeposited);
                $('.panel2').html(tdCompanyFee + tdCustomerAmountAvailable);
                var typeText = {
                    1 : "{{ "types.deposit"|trans({}, "TransactionBundle") }}",
                    2 : "{{ "types.withdraw"|trans({}, "TransactionBundle") }}",
                    3 : "{{ "types.transfer"|trans({}, "TransactionBundle") }}",
                    4 : "{{ "types.bonus"|trans({}, "TransactionBundle") }}",
                    5 : "{{ "types.p2p_transfer"|trans({}, "TransactionBundle") }}",
                    6 : "{{ "types.dwl"|trans({}, "TransactionBundle") }}",
                    8 : "{{ "types.bet"|trans({}, "TransactionBundle") }}",
                    10 : "{{ "types.debit_adjustment"|trans({}, "TransactionBundle") }}",
                    11 : "{{ "types.credit_adjustment"|trans({}, "TransactionBundle") }}"
                };

                var tr = "&nbsp;";

                if (data.sub_transactions.length > 0) {
                    $.each(data.sub_transactions , function(key,val) {
                        tr += '<tr>'+
                                '<th scope="row">' + typeText[val.type]+ '</th>'+
                                '<td>' + val.customer_product.product.name + '</td>'+
                                '<td>' + val.customer_product.username + '</td>'+
                                '<td>' + val.customer_product.currency.code + '</td>'+
                                '<td>' + val.amount + '</td>'+
                            '</tr>'
                        ;
                    });
                }
                $('.subtrans').html(tr);
                $('#reasonForVoid').val('');
                voidLink = data['@link'];
                $('#formModal').modal('show');
                $('#formModal div').closest('.form-group').removeClass('has-error');
                //$('#formModal div').closest('ul').html('');
                $('#formModal div').next().find('ul').html('');
                $(".btn-void-transaction").removeAttr('disabled');

                var container =  document.getElementById('reasonContainer');
                $(container).empty();

                if (transactionType === 'transfer' || transactionType === 'p2p_transfer') {
                    var temp = document.getElementById('textAreaReason');
                    var clone = temp.content.cloneNode(true);
                } else if (transactionType === 'bonus') {
                    var temp = document.getElementById('inputReason');
                    var clone = temp.content.cloneNode(true);
                }else {
                    var temp = document.getElementById('selectReason');
                    var clone = temp.content.cloneNode(true);
                }

                container.appendChild(clone);
            });

            $('#transactionList table').on('draw.dt', function () {
                listTable.dataTable.api().columns.adjust().responsive.recalc();
            });

            function voidTransaction(voidLink)
            {
                var reasonToVoidOrDecline = $('#reasonForVoid').val();
                $.ajax({
                    url: voidLink,
                    globalAjaxComplete : false,
                    type: "POST",
                    dataType: "JSON",
                    data:  {
                        'Transaction': {
                            'action' : 'void',
                            'reasonToVoidOrDecline' : reasonToVoidOrDecline
                        }
                    },
                    'beforeSend': function() {
                        $('#formModal div').closest('.form-group').removeClass('has-error');
                        $('#formModal div').closest('.form-group .help-block ul').html('');
                        $(".btn-void-transaction").attr('disabled', 'disabled');
                    },
                    'statusCode': {
                        '422': function(jqXHR) {
                            $.Notification.notify('error' ,'top center', jqXHR.responseJSON.__notifications.title, jqXHR.responseJSON.__notifications. message_notification);
                            $(this).data('global-ajax-error', false);
                            $('#formModal div').closest('.form-group').addClass('has-error');
                            $('#formModal div').next().find('ul').html('').append('<li><span class="glyphicon glyphicon-exclamation-sign"></span> '+ jqXHR.responseJSON.__notifications.message_box +'</li>');
                        }
                    },
                    success: function(data){
                        var notifications = data.__notifications || [];
                        swal({
                            'type': notifications.type,
                            'title': notifications.title,
                            'text': notifications.message
                        }, function() {
                            listTable.reloadTable();
                            $('#formModal div').closest('.form-group').removeClass('has-error');
                            $('#formModal div').closest('.form-group .help-block ul').html('');
                            $('#formModal').modal('hide');
                        });
                    },
                    'complete': function(jqXHR) {
                        $(".btn-void-transaction").removeAttr('disabled');
                    }
                });
            }

            $(document).on('onWebsocketOpen', function (e, session) {
                session.subscribe('bo.topic.transaction_declined', function(args) {
                    var data = args[0];
                    if (data.forTableReload) {
                        listTable.reloadTable();
                    }
                });
                session.subscribe('btc.request_status', function(args) {
                    listTable.reloadTable();
                });
            });
        });
    </script>
{% endblock %}
