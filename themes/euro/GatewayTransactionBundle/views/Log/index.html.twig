{% extends 'AppBundle:Layout:base.html.twig' %}

{% block title %}{{ "page.title.logList"|trans({},"GatewayTransactionBundle") }}{% endblock %}

{% block stylesheets %}
    <!-- DataTables -->
    <link href="{{ asset('assets/plugins/datatables/jquery.dataTables.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/buttons.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/responsive.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/dataTables.colVis.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/dataTables.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>

    <link href="{{ asset("assets/plugins/bootstrap-datepicker/css/bootstrap-datepicker.min.css") }}" rel="stylesheet"/>
    <link href="{{ asset("assets/plugins/bootstrap-daterangepicker/daterangepicker.css") }}" rel="stylesheet"/>

    <link href="{{ asset("assets/plugins/custombox/css/custombox.css") }}" rel="stylesheet">
{% endblock %}

{% block pageTitle -%}{{ "menus.GatewayLog"|trans({},"GatewayTransactionBundle") }}{%- endblock pageTitle %}

{% block breadcrumb -%}
    <li>{{ "breadcrumb.transaction"|trans({},"AppBundle") }}</li>
    <li>{{ "menus.GatewayLoglist"|trans({},"GatewayTransactionBundle") }}</li>
{%- endblock %}

{% block pageHeaderExtra %}
    <div class="pull-right">
        <div class="btn-group pull-right">
            {% if is_granted('ROLE_TRANSACTION_VIEW') %}
            <button type="button" class="btn btn-primary dropdown-toggle waves-effect waves-light pull-right m-b-5" data-toggle="dropdown" aria-expanded="false">{{ "quickLinks.transactBtn"|trans({},"GatewayTransactionBundle") }} <span class="ti-angle-down m-l-10"></span></button>
            {% endif %}
            <ul class="dropdown-menu pull-right" role="menu">
                <li><a href="{{ path("gateway_transaction.create_page", {'type': 'deposit'}) }}">{{ "types.Deposit"|trans({}, 'GatewayTransactionBundle') }}</a></li>
                <li><a href="{{ path("gateway_transaction.create_page", {'type': 'withdraw'}) }}">{{ "types.Withdraw"|trans({}, 'GatewayTransactionBundle') }}</a></li>
                <li><a href="{{ path("gateway_transaction.create_page", {'type': 'transfer'}) }}">{{ "types.Transfer"|trans({}, 'GatewayTransactionBundle') }}</a></li>
            </ul>
        </div>
        <ul class="list-inline quicklinks font-13 font-normal text-right">
            <li>{{ "quickLinks.name"|trans({},"GatewayTransactionBundle") }}:</li>
            {% if is_granted('ROLE_GATEWAY_TRANSACTION_VIEW') %}
            <li><a href="{{ path("gateway_transaction.list_page") }}">{{ "quickLinks.gatewayTrans"|trans({},"GatewayTransactionBundle") }}</a></li>|
            {% endif %}
            {% if is_granted('ROLE_GATEWAY_VIEW') %}
            <li><a href="{{ path("gateway.list_page") }}">{{ "quickLinks.gateway"|trans({},"GatewayTransactionBundle") }}</a></li>|
            {% endif %}
        </ul>
    </div>
{% endblock pageHeaderExtra %}

{% block page %}
    <div class="col-sm-12">
        <div class="card-box">
            <div id="gatewayTransaction">
                <table id="datatable-responsive"
                       class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0"
                       width="100%">
                    <thead>
                    <tr>
                        <th>{{ "fields.log.timestamp"|trans({}, "GatewayTransactionBundle") }}</th>
                        <th>{{ "fields.log.gateway"|trans({}, "GatewayTransactionBundle") }}</th>
                        <th>{{ "fields.log.currency"|trans({}, "GatewayTransactionBundle") }}</th>
                        <th>{{ "fields.log.previousBalance"|trans({}, "GatewayTransactionBundle") }}</th>
                        <th>{{ "fields.log.amount"|trans({}, "GatewayTransactionBundle") }}</th>
                        <th>{{ "fields.log.currentBalance"|trans({}, "GatewayTransactionBundle") }}</th>
                        <th>{{ "fields.log.reference"|trans({}, "GatewayTransactionBundle") }}</th>
                    </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot></tfoot>
                </table>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('bundles/app/js/ZTable.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/jquery.dataTables.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.bootstrap.js') }}"></script>

    <script src="{{ asset('assets/plugins/datatables/dataTables.buttons.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/buttons.bootstrap.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/vfs_fonts.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/buttons.html5.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.responsive.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/responsive.bootstrap.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.colVis.js') }}"></script>

    <script src="{{ asset("assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js") }}" type="text/javascript"></script>
    <script src="{{ asset("assets/plugins/bootstrap-daterangepicker/daterangepicker.js") }}" type="text/javascript"></script>

    <script src="{{ asset("assets/plugins/custombox/js/custombox.min.js") }}"></script>
    <script src="{{ asset("assets/plugins/custombox/js/legacy.min.js") }}"></script>

    <script type="text/javascript" >
        var userPreferences = {{ app.user.getPreference('ui.gatewayTransaction.list.column.visibility')|json_encode()|raw }};

        $(function(){
            var listTable = new ZTable('#gatewayTransaction',  {
                'ajax': {
                    'url': '{{ path("gateway_log.list_search") }}',
                    'data': function (data, dataTable) {
                        return {
                            'search': data.filters.search,
                            'length': data.length,
                            'start': dataTable.start,
                            'datatable': true,
                            'route': true,
                            'draw': dataTable.draw,
                            'order': data.order,
                            'filter' : data.filters
                        };
                    },
                    'dataFilter': function (str) {
                        return str;
                    }
                },
                'attrs': {
                    'colvisButton' : {
                        'data-style': 'btn-primary'
                    }
                },
                'colvis': {
                    'hidden': function () {
                        var hidden = [];
                        for (var i in userPreferences) {
                            if (userPreferences[i] == 'false') {
                                hidden.push(eval(i));
                            }
                        }

                        return hidden;
                    },
                    'exclude': ['gatewayid', 'transactionDate' , 'action', 'amount']
                },
                'featuresDom': "<'form-inline'"
                + "<'form-group m-r-10 ft-date'<'xs-date'ft>>"
                + "fTcodb"
                + "<'form-group'b>>",
                'features': {
                    'from': {
                        'dom': "<'form-group form-group-sm m-r-10'<'input-group'i<^span 'input-group-addon bg-white text-default'<!'fa fa-calendar'!>>>>",
                        'type': 'date',
                        'symbol': 'f',
                        'applyOnChanged': false,
                        'attrs': {
                            'placeholder': 'From'
                        }
                    },
                    'to': {
                        'dom': "<'form-group form-group-sm m-r-10'<'input-group'i<^span 'input-group-addon bg-white text-default'<!'fa fa-calendar'!>>>>",
                        'type': 'date',
                        'symbol': 'T',
                        'applyOnChanged': false,
                        'attrs': {
                            'placeholder': 'To'
                        }
                    },
                    'currency': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'Currency',
                        'symbol': 'c',
                        'class': 'selectpicker',
                        'waitByTable': true,
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'data-none-selected-text': 'Select Currency',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'initialized': function (feature) {
                            $.ajax({
                                'url': '{{ path('currency.list_search') }}',
                                'type': 'POST',
                                'success': function (data) {
                                    var options = {};
                                    for (var i in data) {
                                        var option = $("<option value='" + data[i].id + "'>" + data[i].name + "</option>");
                                        if (feature.feature.value.indexOf(data[i].id + "") !== -1) {
                                            option.attr('selected', 'selected');
                                        }
                                        $(feature.input).append(option);
                                    }
                                    $(feature.input).selectpicker('refresh');
                                    feature.setToDone();
                                    feature.ztable.reloadTable();
                                }
                            });
                            
                            $(feature.input).change(function () {
                                var currencies = feature.getValue();
                                var gatewayElement = feature.ztable.getFeature('gateway');
                                if (currencies != null) {
                                    $(gatewayElement.input).closest('.form-group').removeClass('hidden');
                                } else {
                                    $(gatewayElement.input).closest('.form-group').addClass('hidden');
                                }
                                $.ajax({
                                    'url': '{{ path('gateway.list_search') }}',
                                    'data' : {
                                        'select2' : true,
                                        'currencies' : currencies
                                    },
                                    'success': function (data) {
                                        $(gatewayElement.input).html('');
                                        for (var i in data.items) {
                                            var option = $("<option value='" + data.items[i].id + "'>" + data.items[i].text + "</option>");
                                            if (feature.feature.value.indexOf(data.items[i].id + "") !== -1) {
                                                option.attr('selected', 'selected');
                                            }
                                            $(gatewayElement.input).append(option);
                                        }
                                        $(gatewayElement.input).selectpicker('refresh');
                                    }
                                });
                            });
                        },
                        'value': '{{ app.request.get("currency", [])|json_encode|raw }}',
                        'getValue': function (feature) {
                            return $(feature.input).val();
                        },
                    },
                    'gateway': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter hidden'i>",
                        'type': 'select',
                        'label': 'Gateway',
                        'symbol': 'o',
                        'class': 'selectpicker',
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'title': 'Select Gateway',
                            'multiple': 'multiple',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'applyOnChanged': false,
                        'waitByTable': true,
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'initialized': function (feature) {
                            $.ajax({
                                'url': '{{ path('gateway.list_search') }}',
                                'data' : {
                                    'select2' : true
                                },
                                'success': function (data) {
                                    for (var i in data.items) {
                                        var option = $("<option value='" + data.items[i].id + "'>" + data.items[i].text + "</option>");
                                        if (feature.feature.value.indexOf(data.items[i].id + "") !== -1) {
                                            option.attr('selected', 'selected');
                                        }
                                        $(feature.input).append(option);
                                    }
                                    $(feature.input).selectpicker('refresh');
                                    feature.setToDone();
                                    feature.ztable.reloadTable();
                                }
                            });
                        },
                        'value': '{{ app.request.get("gateway", [])|json_encode|raw }}',
                    },
                    'resetFilter': {
                        'type': 'button',
                        'label': 'Reset Filter',
                        'symbol': 'b',
                        'attrs': {
                            'type': 'button',
                            'class': 'btn btn-sm btn-inverse'
                        },
                        'initialized': function (feature) {
                            $(feature.input).click(function () {
                                $("select.ztable_length_input").val('10').change();
                                var gatewayElement = feature.ztable.getFeature('gateway');
                                $(gatewayElement.input).closest('.form-group').addClass('hidden');
                                feature.ztable.reset();
                            });
                        }
                    },
                    'applyFilter': {
                        'type': 'button',
                        'label': 'Apply Filter',
                        'symbol': 'd',
                        'attrs': {
                            'type': 'button',
                            'class': 'btn btn-sm btn-default'
                        },
                        'initialized': function (feature) {
                            $(feature.input).click(function () {
                                feature.ztable.forceReloadTable();
                            });
                        }
                    },                            
                },
                'columns': [
                    {
                        'data': 'timestamp',
                        'name': 'gl.timestamp',
                        'defaultContent': '',
                        'render': function (data, type, full) {
                            return moment(data).format('MMM D, YYYY h:mm A');
                        }
                    },
                    { 
                        'data': 'gateway.name', 
                        'name': 'g.name',
                        'defaultContent': '' 
                    },
                    { 
                        'data': 'currency.code', 
                        'name': 'cur.code',
                        'defaultContent': '' 
                    },
                    {
                        'data': 'balance',
                        'name': 'gl.balance',
                        'defaultContent': '',
                        'render': function (data) {
                            return (new Decimal(data)).toFixed(2);
                        }
                    },
                    {
                        'data': 'amount',
                        'name': 'gl.amount',
                        'defaultContent': '',
                        'render': function (data) {
                            return (new Decimal(data)).toFixed(2);
                        }
                    },
                    {
                        'data': 'current_balance',
                        'defaultContent': '',
                        'render': function (data) {
                            return (new Decimal(data)).toFixed(2);
                        }
                    },
                    {
                        'data': 'reference_number',
                        'defaultContent': '',
                        'name': 'gl.referenceNumber',
                        'render': function (data, type, full) {
                            var originText = {
                                'transaction': "{{ "origin.transaction"|trans({}, "GatewayTransactionBundle") }}",
                                'gatewayTransaction': "{{ "origin.gatewayTransaction"|trans({}, "GatewayTransactionBundle") }}",
                                'gateway': "{{ "origin.gateway"|trans({}, "GatewayTransactionBundle") }}"
                            };

                            return "<a href='" + full['@link'] + "'>" + data + "</a> " +
                                "<small>" + originText[full.origin_text] +
                                (full.username ? " (" + full.username + ")" : "") + "</small>";
                        }
                    },
                ],
                'ordering': true,
                'columnDefs': [
                    { "orderable": false, "targets": [5] }
                ]
            });

            $('#gatewayTransaction').on('ztable.change.column.visible', function (e, colvis, ztable) {
                saveUserPreferences({'ui.gatewayTransaction.list.column.visibility': ztable.getColumnVisibility()});
            });
        });
    </script>
{% endblock %}