{% use "AppBundle:Widget:base.html.twig"  %}

{% block list_assetcss %}
    {{ asset_render('css', 'default', [asset('assets/plugins/datatables/jquery.dataTables.min.css')]) }}
    {{ asset_render('css', 'default', [asset('assets/plugins/datatables/responsive.bootstrap.min.css')]) }}
    {{ asset_render('css', 'default', [asset('assets/plugins/datatables/dataTables.colVis.css')]) }}
    {{ asset_render('css', 'default', [asset('assets/plugins/datatables/dataTables.bootstrap.min.css')]) }}
    {{ asset_render('css', 'default', [asset("assets/plugins/bootstrap-select/css/bootstrap-select.min.css")]) }}
{% endblock list_assetcss %}

{% block list_container %}
    <div id="{{ block_id }}" class="page-widget-list">
        {{ widget_render_block(widget, 'widget') }}
    </div>
{% endblock list_container %}

{% block list_widget %}
    <table class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0" width="100%">
        <thead>
            <tr>
                {% for column,info in widget.getColumns()  %}
                    {% with {'attrs': info.attrs|default('')} %}
                    <th {{ block('list_column_attrs') }}>{{ info.label }}</th>
                    {% endwith %}
                {% endfor %}
            </tr>
        </thead>
        <tbody>
        </tbody>
        {% if widget.hasFooter() %}
        <tfoot>
            <tr>
                {% for column,info in widget.getFooterColumns()  %}
                    {% with {'attrs': info.attrs|default('')} %}
                    <{{ info.isHead|default(false) ? "th" : "td" }} id="{{ block_id }}_footer_{{ column }}" {{ block('list_column_attrs') }}>
                        {% if info.type|default('static') == 'static' %}
                            {{ info.value }}
                        {% endif %}
                    </{{ info.isHead|default(false) ? "th" : "td" }}>
                    {% endwith %}
                {% endfor %}
            </tr>
        </tfoot>
        {% endif %}
    </table>
{% endblock list_widget %}

{% block list_column_attrs %}
    {% spaceless %}
        {% for attr,value in attrs %}
        {{ attr }}="{{ value }}"
        {% endfor %}
    {% endspaceless %}
{% endblock %}

{% block list_javascript %}
    <script type="text/javascript" id="{{ id }}_javascript">

        page.addScript('{{ absolute_url(asset("assets/plugins/datatables/jquery.dataTables.min.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/plugins/datatables/dataTables.bootstrap.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/plugins/datatables/dataTables.buttons.min.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/plugins/datatables/buttons.bootstrap.min.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/plugins/datatables/buttons.html5.min.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/plugins/datatables/buttons.print.min.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/plugins/datatables/dataTables.responsive.min.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/plugins/datatables/responsive.bootstrap.min.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/pages/datatables.init.js")) }}', false);
        page.addScript('{{ absolute_url(asset("assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js")) }}', true);
        page.addScript('{{ absolute_url(asset("assets/plugins/bootstrap-daterangepicker/daterangepicker.js")) }}', true);
        page.addScript('{{ absolute_url(asset('assets/plugins/bootstrap-select/js/bootstrap-select.min.js')) }}', true)
        page.addScript('{{ absolute_url(asset('bundles/app/js/ZTable.js')) }}', false);

        var {{ id }}Table;

        function {{ id }}ExecPage(page)
        {
            $(function () {
                {{ id }}Table = new ZTable('#{{ id }}_container', {
                    'autoinit': {{ widget.isAutoload() ? 'true' : 'false' }},
                    'colvis': {
                        'hidden': function() {
                            if (typeof {{ id }}_extendColvisHidden !== 'undefined') {
                                return {{ id }}_extendColvisHidden();
                            }

                            return [];
                        },
                        'exclude': [{% for column,info in widget.getColumns() if info.exclude is defined %}'{{ info.from ?? column }}',{% endfor %}]
                    },
                    'ajax': {
                        {% if properties.ajax.url is defined %}
                        'url': '{{ path(properties.ajax.url.route, (properties.ajax.url.params|default([]))) }}',
                        {% endif  %}
                        {% if properties.ajax.dataFilter is defined %}
                        'dataFilter': {{ properties.ajax.dataFilter }},
                        {% else %}
                        'dataFilter': function (str) {
                            var draw = this.draw;
                            var json = $.parseJSON( str );

                            {% for footerColumn,footerInfo in widget.getFooterColumns() %}
                                {% if footerInfo.type == 'function' %}
                                    $('#{{ id }}_widget_footer_{{ footerColumn }}').html({{ footerInfo.function }}(json.{{ footerInfo.from }}));
                                {% elseif footerInfo.type != "static" %}
                                    $('#{{ id }}_widget_footer_{{ footerColumn }}').html(json.{{ footerInfo.from }});
                                {% endif %}
                            {% endfor %}
                            
                            if (!json.hasOwnProperty('recordsTotal')) {
                                $('#{{ id }}_container div.dataTables_info').hide();
                                setTimeout(function() {
                                    var footerInfo = $('#{{ id }}_container div.dataTables_info').html();
                                    var splitter = footerInfo.split('(');
                                    $('#{{ id }}_container div.dataTables_info').html(splitter[0]);
                                    $('#{{ id }}_container div.dataTables_info').fadeIn(300);
                                }, 500);

                                return JSON.stringify({
                                    'draw': draw,
                                    'data': json.records,
                                    'recordsFiltered': json.recordsFiltered
                                });
                            } else {
                                return JSON.stringify({
                                    'draw': draw,
                                    'data': json.records,
                                    'recordsFiltered': json.recordsFiltered,
                                    'recordsTotal': json.recordsTotal
                                });
                            }
                        },
                        {% endif %}
                        'type': '{{ properties.ajax.type|default('GET') }}',
                        'headers': {
                            'X-WIDGET-REQUEST': 'onGetList',
                            'X-WIDGET-PATH': '{{ widget_path }}',
                            'X-WIDGET-ID': '{{ id }}'
                        },
                        'data': function (ztableData, dataTable) {

                            var data = {
                                'data': ztableData
                            };

                            if (typeof {{ id }}_extendData !== 'undefined') {
                                return {{ id }}_extendData(data, dataTable);
                            }

                            return data;
                        }
                    },
                    'createdRow': function(row, data, dataIndex) {
                        if (typeof {{ id }}_extendCreatedRow !== 'undefined') {
                            return {{ id }}_extendCreatedRow(row, data, dataIndex);
                        }
                    },
                    {% if widget.property('search')[:1] == ':' %}
                    'search': '{{ app.request.get(widget.property('search', '')[1:], '') }}',
                    {% else %}
                    'search': '{{ widget.property('search', '') }}',
                    {% endif %}
                    'dom': "{{ widget.property('dom', "<'row m-b-10'<'col-md-12'<'pull-right'C>F>><'row form-inline'<'col-md-6 col-sm-6 col-xs-6'l><'col-md-6 col-sm-6 col-xs-6 text-right's>>t")|raw('js') }}",
                    'columns': {{ id }}_generateColumns(),
                    'featuresDom': "{{ widget.property('filtersDom', '')|raw('js') }}",
                    'features': {{ id }}_generateFeatures(),
                    'initialized': function (ztable) {
                        $('#{{ id }}_container').trigger('ztable.initialized');
                    },
                    'template': typeof {{ id }}_generateSearchInput == 'function' ? {{ id }}_generateSearchInput() : {},
                });
            });
        }

        function {{ id }}_listInitializedReset(feature)
        {
            $(feature.input).click(function () {
                $('#{{ id }}_container').find("select.ztable_length_input").val('10').change();
                feature.ztable.reset();
            });
        }

        function {{ id }}_listInitializedApply(feature)
        {
            $(feature.input).click(function () {
                feature.ztable.forceReloadTable();
            });
        }

        function {{ id }}_generateFeatures()
        {
            {% if widget.property('filterRoles') is defined and widget.property('filterRoles') is not empty and not is_granted(widget.property('filterRoles')) %}
                return {};
            {% else %}
                var features = {{ widget.property('filters')|json_encode()|raw('js') }};
                {% for filterName,filterDetail in widget.property('filters') -%}
                    {% if filterDetail.type == 'select' %}
                        features.{{ filterName }}.resetValue = function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        };
                        features.{{ filterName }}.rendered = function (feature) {
                            if (feature.feature.value !== '') {
                                $(feature.input).val(feature.feature.value.split(','));
                            } else {
                                $(feature.input).val([]);
                            }
                        };
                    {% endif %}

                    {% if filterDetail.value is defined and filterDetail.value[:1] == ':' and filterDetail.type == 'select' %}
                        features.{{ filterName }}.value = '{{ app.request.get(filterDetail.value[1:], [])|join(',') }}';
                    {% elseif filterDetail.value is defined and filterDetail.value[:1] == ':' %}
                        features.{{ filterName }}.value = '{{ app.request.get(filterDetail.value[1:], '') }}';
                    {% endif %}

                    {% if filterDetail.type == 'select' and filterDetail.choicesFrom is defined %}
                        delete features.{{ filterName }}.choicesFrom;
                        features.{{ filterName }}.choices = {{ widget.getFilterChoices(filterName)|json_encode()|raw('js') }};
                    {% endif %}

                    {% if filterDetail.initialized is defined %}
                        features.{{ filterName }}.initialized = {{ filterDetail.initialized }};
                    {% endif %}
                {%- endfor %}
                return features;
            {% endif %}
        }

        function {{ id }}_generateColumns()
        {
            var columns = [];
            {% for column,info in widget.getColumns() %}
            columns.push({
                'data': '{{ info.from ?? column }}',
                'name': '{{ info.from ?? column }}',
                'render': function (data, type, full) {
                    {% if info.type == 'partial' %}
                    return '{{ widget_render_block(widget, info.partial) }}';
                    {% elseif info.type == 'text' %}
                    return data;
                    {% elseif info.type == 'choice' %}
                    var choices = {{ info.choices|json_encode()|raw }}

                    return choices[data];
                    {% elseif info.type == 'function' %}
                    return {{ info.function }}(data, type, full);
                    {% elseif info.type == 'date' %}
                    return moment(data).format(phpjs_dateFormat('{{ info.format }}'));
                    {% endif %}
                }
            });
            {% endfor %}

            return columns;
        }

        page.addLoader({{ id }}ExecPage, [
            '{{ absolute_url(asset('assets/plugins/bootstrap-select/js/bootstrap-select.min.js')) }}',
            '{{ absolute_url(asset("assets/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js")) }}',
            '{{ absolute_url(asset('bundles/app/js/ZTable.js')) }}'
        ]);
    </script>
{% endblock list_javascript %}
