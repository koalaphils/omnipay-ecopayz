{% extends 'AppBundle:Layout:base.html.twig' %}

{% block title %}{{ "page.title.list"|trans({},"ProductBundle") }}{% endblock %}

{% block stylesheet_plugins %}
{{ form_assetcss(form) }}
{% endblock %}

{% block javascript_plugins %}
{{ form_assetjs(form) }}
{% endblock %}

{% block stylesheets %}
    <!-- DataTables -->
    <link href="{{ asset('assets/plugins/datatables/jquery.dataTables.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/buttons.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/responsive.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/dataTables.colVis.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/dataTables.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
{% endblock %}

{% block pageTitle -%} {{ "menus.Product"|trans({},"ProductBundle") }} {%- endblock pageTitle %}

{% block breadcrumb -%}
<li>{{ "breadcrumb.finance"|trans({},"AppBundle") }}</li>
<li>{{ "breadcrumb.list"|trans({},"ProductBundle") }}</li>
{%- endblock breadcrumb %}

{% block pageHeaderExtra %}
<div class="pull-right">
    {% if is_granted('ROLE_PRODUCT_CREATE') %}
    <a class="btn btn-primary waves-effect waves-light pull-right m-b-10" id="btnCreate" title ="Add Product">
        <i class="ti-plus"></i> {{ "quicklink.add"|trans({}, 'ProductBundle') }}
    </a>
    {% endif %}
    <ul class="list-inline quicklinks font-13 font-normal text-right">
        <li>Quick Links:</li>
        {% if is_granted('ROLE_CURRENCY_VIEW') %}
        <li><a href="{{ path("currency.list_page") }}">Currency</a></li>|
        {% endif %}
        {% if is_granted('ROLE_GATEWAY_VIEW') %}
        <li><a href="{{ path("gateway.list_page") }}">Gateway</a></li>|
        {% endif %}
    </ul>
</div>
{% endblock pageHeaderExtra %}

{% block page %}
    <div class="col-sm-12">
        <div class="card-box">
            <div id="productList">
                <table id="datatable-responsive"
                    class="table table-bordered table-striped dt-responsive nowrap" cellspacing="0"
                    width="100%">
                    <thead>
                        <tr>
                            <th data-priority="1">{{ "fields.id"|trans({}, "ProductBundle") }}</th>
                            <th>{{ "fields.code"|trans({}, "ProductBundle") }}</th>
                            <th>{{ "fields.name"|trans({}, "ProductBundle") }}</th>
                            <th>{{ "fields.isActive"|trans({}, "ProductBundle") }}</th>
                            <th>{{ "fields.commission"|trans({}, "ProductBundle") }}</th>
                            <th data-priority="2">{{ "fields.action"|trans({}, "ProductBundle") }}</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot></tfoot>
                </table>
            </div>
        </div>
    </div>
{% endblock%}

{% block modals -%}
<div id="formModal" class="modal fade" tabindex="-1" style="display: none;" data-keyboard="false" data-backdrop="static">
    <div class="modal-dialog modal-responsive">
        <div class="modal-conten p-0 b-0t">
            <div class="panel panel-color panel-inverse">
                <div class="panel-heading">
                    <h3 class="panel-title">&nbsp;</h3>
                </div>
                {{ form_start(form) }}
                <div class="panel-body p-20">
                    <div class="row">
                        {{ form_row(form.code) }}
                        {{ form_row(form.name) }}
                        {{ form_row(form.url) }}
                        {{ form_row(form.commission) }}
                        {{ form_row(form.betadminToSync) }}
                        {{ form_row(form.isActive) }}
                        {#{{ form_row(form.logo) }}#}
                    </div>
                </div>
                <div class="panel-footer text-right">
                    {{ form_widget(form.save, {'attr': {'class': 'btn-sm btn-success'}}) }}
                    <button class="btn btn-sm btn-inverse btnModalClose" data-dismiss="modal">Cancel</button>
                </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
</div>
{%- endblock modals %}
{% block javascripts %}
    <script src="{{ asset('bundles/app/js/ZTable.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/jquery.dataTables.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.bootstrap.js') }}"></script>

    <script src="{{ asset('assets/plugins/datatables/dataTables.buttons.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/buttons.bootstrap.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/vfs_fonts.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/buttons.html5.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.responsive.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/responsive.bootstrap.min.js') }}"></script>
    <script src="{{ asset('assets/plugins/datatables/dataTables.colVis.js') }}"></script>

    <script type="text/javascript" >
        (function($){

            $.fn.list = function(options, params){
                var settings = options;
                params = params || [];
                return this.each(function(){
                    var elem = $(this);
                    settings = $.extend(true,_defaults(),options);
                    init(elem, settings);
                });
            };

            function init(elem, settings) {
                initTable(elem, settings);
            }

            function initTable(elem, settings) {
                var table = $(elem).find('table');
                var listUrl = settings.url.list;
                var userPreferences = {{ app.user.getPreference('ui.product.list.column.visibility')|json_encode()|raw }};
                var dataTable = new ZTable('#productList',  {
                    'ajax': {
                        'url': settings.url.list,
                        'data': function (data, dataTable) {
                            return {
                                'search': data.filters.search,
                                'length': data.length,
                                'start': dataTable.start,
                                'datatable': true,
                                'route': true,
                                'draw': dataTable.draw,
                                'order': data.order,
                                'filter' : data.filters
                            };
                        },
                        'dataFilter': function (str) {
                            return str;
                        }
                    },
                    'colvis': {
                        'hidden': function () {
                            var hidden = ['p.id'];
                            for (var i in userPreferences) {
                                if (userPreferences[i] == 'false') {
                                    hidden.push(eval(i));
                                }
                            }
                            return hidden;
                        },
                        'exclude': ['p.id']
                    },
                    'featuresDom': "<'form-inline'"
                    + "<'form-group m-r-10 ft-date'<'xs-date'ft>>"
                    + "ftsdb"
                    + "<'form-group m-r-10'<'m-t-10'sb>>",
                    'features': {
                        'from': {
                            'dom': "<'form-group form-group-sm m-r-10 cst-date'<'input-group'i<^span 'input-group-addon bg-white text-default'<!'fa fa-calendar'!>>>>",
                            'type': 'date',
                            'label': 'From',
                            'symbol': 'f',
                            'attrs': {
                                'placeholder': 'From'
                            },
                            'applyOnChanged': false
                        },
                        'to': {
                            'dom': "<'form-group form-group-sm m-r-10 cst-date'<'input-group'i<^span 'input-group-addon bg-white text-default'<!'fa fa-calendar'!>>>>",
                            'type': 'date',
                            'label': 'To',
                            'symbol': 't',
                            'attrs': {
                                'placeholder': 'To'
                            },
                            'applyOnChanged': false
                        },
                        'status': {
                            'dom': "<'form-group form-group-sm m-r-10 xs-filter'<'status-product'i>>",
                            'type': 'select',
                            'label': 'Status',
                            'symbol': 's',
                            'class': 'selectpicker',
                            'attrs': {
                                'data-style': 'btn-white btn-sm',
                                'multiple': 'multiple',
                                'data-none-selected-text': 'Select Status',
                                'data-width': 'auto'
                            },
                            'applyOnChanged': false,
                            'resetValue': function (feature) {
                                $(feature.input).selectpicker('val', feature.feature.value);
                            },
                            'getValue': function (feature) {
                                var value = $(feature.input).val();
                                if (value === null) {
                                    value = [];
                                }
                                var statuses = [];
                                if (value.length > 0 && value.indexOf('enabled') !== Global.variables.indexNotFound) {
                                    statuses.push(Global.gateway.status.enabled.value);
                                }
                                if (value.length > 0 && value.indexOf('suspended') !== Global.variables.indexNotFound) {
                                    statuses.push(Global.gateway.status.suspended.value);
                                }

                                return statuses;
                            },
                            'rendered': function (feature) {
                                $(feature.input).selectpicker('val', '');
                            },
                            'choices': {
                                'enabled': 'Enbaled',
                                'suspended': 'Suspended'
                            },
                            'value': []
                            },
                        'applyFilter': {
                            'type': 'button',
                            'label': 'Apply Filter',
                            'symbol': 'd',
                            'attrs': {
                                'type': 'button',
                                'class': 'btn btn-sm btn-default',
                                'title': 'Apply Filter'
                            },
                            'initialized': function (feature) {
                                $(feature.input).click(function () {
                                    feature.ztable.reloadTable();
                                });
                            }
                        },
                        'resetFilter': {
                            'type': 'button',
                            'label': 'Reset Filter',
                            'symbol': 'b',
                            'attrs': {
                                'type': 'button',
                                'class': 'btn btn-sm btn-inverse',
                                'title': 'Reset Filter'
                            },
                            'initialized': function (feature) {
                                $(feature.input).click(function () {
                                    $("select.ztable_length_input").val('10').change();
                                    feature.ztable.reset();
                                });
                            }
                        },
                    },
                    'ordering': true,
                    'columnDefs': [
                        { "orderable": false, "targets": [4] }
                    ],
                    'columns': settings.columns
                });

                $(table).on('click', 'td a.active-state-action', function(e) {
                    settings.rowOnclick(e, dataTable);
                });

                $(elem).on('refresh', { "dataTable": dataTable}, function(event){
                    dataTable.reloadTable();
                });

                $('#productList').on('click', 'tr td a.update', function (e) {
                    e.preventDefault();
                    var tr = $(e.target).closest('tr');
                    var data = dataTable.dataTable.api().row(tr).data();
                    $('#formModal').trigger('changeData', [data]);
                    $('#formModal').modal('show');
                });

            }

            function _defaults() {
                return {
                    'columns': [
                        {
                            'data': 'product.id',
                            'defaultContent': '',
                            'name': 'p.id',
                            'render': function(data, type, full) {
                                return "<a href='"+full.routes.update+"'>"+data+"</a>";
                            }
                        },
                        {
                            'data': 'product.code',
                            'defaultContent': '',
                            'name': 'p.code',
                            'render': function(data, type, full) {
                                return "<a href='"+full.routes.update+"' class='update'>"+data+"</a>";
                            }
                        },
                        { 'data': 'product.name', 'defaultContent': '', 'name': 'p.name'},
                        {
                            'data': 'product.isActive',
                            'defaultContent': '',
                            'name': 'p.isActive',
                            'render': function(data, type, full) {
                                if (data == '1') {
                                    return "Enabled";
                                }
                                return "Suspended";
                            }
                        },
                        {
                            'data': 'commission',
                            'render': function (data) {
                                return eval(data) + '%';
                            }
                        },
                        {
                            'data': 'product',
                            'name': 'p.action',
                            'render': function(data, text, full) {
                                var isAuthorizedToDelete = {{ authorizedToDelete ? "true" : "false" }};
                                var action = "<a class='btn btn-primary waves-effect waves-light btn-xs ' href='"+full.routes.update+"'>Edit</a>";

                                var suspendAnchor = "<a action='suspend' class='btn btn-danger waves-effect waves-light m-r-10 btn-xs active-state-action' title='Suspend Product'>Suspend</a>";
                                var activateAnchor = "<a action='activate' title='Activate Product' class='btn btn-default waves-effect waves-light btn-xs active-state-action'>Activate</a>&nbsp;";
                                var deleteAnchor = "<a action='delete' title='Delete Product' class='btn btn-inverse waves-effect waves-light btn-xs active-state-action'>Delete</a>&nbsp;";

                                if (data.isActive) {
                                    action = suspendAnchor;
                                } else {
                                    action = activateAnchor;
                                }
                                {%- if is_granted('ROLE_PRODUCT_DELETE') %}
                                if (data.deletedAt === null && isAuthorizedToDelete) {
                                    action += deleteAnchor;
                                }
                                {%- endif %}
                                return action;
                            }
                        }
                    ]
                };
            }

    })(jQuery);
    </script>
    <script type="text/javascript" >
        $(function(){
            $('#productList').list({
                'url': {
                    'list': '{{ path("product.list_search") }}'
                },
                'rowOnclick': function (e, zTable) {
                    dataTable = zTable.dataTable.api();
                    e.preventDefault();
                    var currentRow = $(e.target).parents('tr');
                    if (currentRow.hasClass('child'))
                    currentRow = currentRow.prev();
                    var data = dataTable.row(currentRow).data() ;
                    var anchor = $(e.target).closest('a');
                    var mode = anchor.attr('action');

                    if (mode == 'suspend') {
                        suspendProduct(data);
                    } else if (mode == 'activate') {
                        activateProduct(data);
                    } else if (mode == 'delete') {
                        deleteProduct(data);
                    }
                }

            });

            $('#productList').on('ztable.change.column.visible', function (e, colvis, ztable) {
                saveUserPreferences({'ui.product.list.column.visibility': ztable.getColumnVisibility()});
            });
        });

        function suspendProduct(product)
        {
            confirm2('Are you sure you want to suspend '+ product.name, 'Suspend Product', {
                'type': null,
                'confirmButtonClass': 'btn-success btn-md',
                'confirmButtonText': 'Yes',
                'cancelButtonClass': 'btn-inverse btn-md',
                'cancelButtonText': 'Cancel',
                'html': true,
                'showLoaderOnConfirm': true
            }, function(isSuspended) {
                if(isSuspended) {
                    $.ajax({
                        url : "{{ path('product.suspend') }}",
                        globalAjaxComplete : false,
                        type: "POST",
                        dataType: "JSON",
                        data: {
                            "productId": product.id
                        },
                        success : function (data) {
                            var notifications = data.__notifications || [];
                            swal({
                                'type': notifications.type,
                                'title': notifications.title,
                                'text': notifications.message
                            }, function() {
                                $('#productList').trigger('refresh');
                            });
                        }
                    });
                }
            });
        }

        function activateProduct(product)
        {
            confirm2('Are you sure you want to activate '+ product.name, 'Activate Product', {
                'type': null,
                'confirmButtonClass': 'btn-success btn-md',
                'confirmButtonText': 'Yes',
                'cancelButtonClass': 'btn-inverse btn-md',
                'cancelButtonText': 'Cancel',
                'html': true,
                'showLoaderOnConfirm': true
            }, function(isActivated) {
                if(isActivated) {
                    $.ajax({
                        url : "{{ path('product.activate') }}",
                        globalAjaxComplete : false,
                        type: "POST",
                        dataType: "JSON",
                        data: {
                            "productId": product.id
                        },
                        'success': function (data) {
                            var notifications = data.__notifications || [];
                            swal({
                                'type': notifications.type,
                                'title': notifications.title,
                                'text': notifications.message
                            }, function() {
                                $('#productList').trigger('refresh');
                            });
                        }
                    });
                }
            });
        }

        function deleteProduct(product)
        {
            confirm2('Are you sure you want to delete '+ product.name, 'Delete Product', {
                'type': null,
                'confirmButtonClass': 'btn-success btn-md',
                'confirmButtonText': 'Yes',
                'cancelButtonClass': 'btn-inverse btn-md',
                'cancelButtonText': 'Cancel',
                'html': true,
                'showLoaderOnConfirm': true
            }, function(isDeleted) {
                if (isDeleted) {
                    $.ajax({
                        url : "{{ path('product.delete') }}",
                        globalAjaxComplete : false,
                        type: "POST",
                        dataType: "JSON",
                        data: {
                            "productId": product.id
                        },
                        success : function (data) {
                            var notifications = data.__notifications || [];
                            swal({
                                'type': notifications.type,
                                'title': notifications.title,
                                'text': notifications.message
                            }, function() {
                                $('#productList').trigger('refresh');
                            });
                        }
                    });
                }
            });
        }
    </script>
    <script type="text/javascript" >
    var productId = '';
    $(function(){
        function changeSwitcheryState(el,value){
            if($(el).is(':checked') != value){
                $(el).trigger("click");
            }
        }

        $('#btnCreate').click(function (e) {
            changeSwitcheryState({{ form.isActive.vars.id  }}, false);
            changeSwitcheryState({{ form.betadminToSync.vars.id  }}, false);
            $('#formModal').trigger('changeData', [null]);
            $('#formModal').modal('show');
        });

        $('#formModal').on('changeData', function (e, data) {
            $(this).data('product', data);

            $('#{{ form.vars.id }}').find('.form-group').removeClass('has-error');
            $('#{{ form.vars.id }}').find('.form-group .help-block ul').html('');
            $("#{{ form.save.vars.id }}").removeAttr('disabled');

            if (data === null) {
                $(this).find('#{{ form.code.vars.id }}').val('');
                $(this).find('#{{ form.name.vars.id }}').val('');
                $(this).find('#{{ form.url.vars.id }}').val('');
                $(this).find('#{{ form.commission.vars.id }}').val(0);
                $(this).find('.panel-title').html('Create Product');
                productId = '';
                return;
            }
            $(this).find('.panel-title').html('Update Product');
            productId = "/" + data.id;
            $(this).find('#{{ form.code.vars.id }}').val(data.code);
            $(this).find('#{{ form.name.vars.id }}').val(data.name);
            $(this).find('#{{ form.url.vars.id }}').val(data.url);
            $(this).find('#{{ form.commission.vars.id }}').val(eval(data.commission));
            if (typeof data.details.betadmin  !== "undefined") {
                changeSwitcheryState({{ form.betadminToSync.vars.id  }}, data.details.betadmin.tosync);
            }
            changeSwitcheryState({{ form.isActive.vars.id  }}, data.isActive);

        });

        $('#{{ form.save.vars.id }}').click(function () {
            $.ajax({
                url: "{{path('product.save') }}" + productId ,
                type: "POST",
                dataType: "JSON",
                data:  $("form[name={{ form.vars.id }}]").serialize(),
                'beforeSend': function() {
                    $('#{{ form.vars.id }}').find('.form-group').removeClass('has-error');
                    $('#{{ form.vars.id }}').find('.form-group .help-block ul').html('');
                    $("#{{ form.save.vars.id }}").attr('disabled', 'disabled');
                },
                'statusCode': {
                    '422': function(jqXHR) {
                        $(this).data('global-ajax-error', false);
                        $.each(jqXHR.responseJSON.errors, function(i, e) {
                            var messages = this.toString().split(",");
                            var message = '';
                            $('#' + i).closest('.form-group').addClass('has-error');
                            for (var x in messages) {
                                message = message + '<li><span class="glyphicon glyphicon-exclamation-sign"></span> '+ messages[x] +'</li>';
                            }
                            $('#' + i).next().find('ul').append(message);
                        });
                    }
                },
                success: function(data){
                    if(data.status) {

                        var m = data.message;
                        var t = data.message.text;
                        if (t instanceof Array) {
                            for (i = 0; i < t.length; i++) {
                                $.Notification.notify(m.type ,'top center', m.title, t[i]);
                            }
                        } else {
                            $.Notification.notify(m.type ,'top center', m.title, m.text);
                            $('#formModal').modal('hide');
                            $('#productList').trigger('refresh');
                        }


                    } else {
                        console.log('Message: ' + JSON.stringify(data.message));
                    }
                },
                'complete': function(jqXHR) {
                    $("#{{ form.save.vars.id }}").removeAttr('disabled');
                }
            });

        });
    });
    </script>
    <script type="text/javascript" >
    $(function(){
        $('#{{ form.commission.vars.id }}').on('keypress', function () {
            var commission = $(this).val();
            if (countDecimals(commission) == 10) {
                return false;
            }
        });

        var countDecimals = function (value) {
            if ((value % 1) != 0) {
                return value.toString().split(".")[1].length;
            }

            return false;
        };
    });
    </script>
{% endblock %}
