<?php

namespace DbBundle\Entity;

use \DbBundle\Entity\Customer as Member;
use \DbBundle\Entity\CustomerProduct as MemberProduct;

/**
 * see more information at https://codeception.com/docs/modules/DataFactory
 */
class DataFactoryTest extends \Codeception\Test\Unit
{
    /**
     * @var \IntegrationTester
     */
    protected $tester;

    public function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub

    }

    // tests
    public function testCreatingARandomMemberAtDatabase()
    {
        // this will create a member in the database with random data
        // random data will be provided by Faker
        // the generated data will be based on the model at tests/_support/helper/Factories.php
        //
        //
        //      $factory->_define(Member::class, [
        //            'user' => 'entity|' . User::class,
        //            'fullName' => Faker::name(),
        //            'joinedAt' => new \DateTime(),
        //            'currency' => 'entity|' . Currency::class,
        //        ]);
        //
        // the model defines a relationship with a user entity, so it will automatically create an associated user entity following the User Model defined at the same Factories.php file
        $member = $this->tester->have(Member::class);

        $this->tester->seeInDatabase('customer', ['customer_id' => $member->getId()]);
        $this->tester->seeInDatabase('user', ['user_id' => $member->getUser()->getId()]);
    }

    public function testCreatingAMemberReferralNameForAMember()
    {
        $memberReferralName = $this->tester->have(MemberReferralName::class);

        $this->tester->seeInDatabase('member_referral_name', ['member_referral_name_id' => $memberReferralName->getId()]);
    }

    public function testCreatingARandomMemberWithSomeCustomData()
    {
        // you can specify custom parts of an entity to be generated if needed
        // when you specify a property, it will override the random data to be generated by Faker defined at Factories.php
        $result =  $this->tester->have(Member::class, [
            'fullName' => 'Mark Anthony Rosario',
        ]);

        $this->tester->seeInDatabase('customer', ['customer_id' => $result->getId()]);
    }

    public function testGeneratingAUserFromMemberProduct()
    {
        // since DataFactory automatically creates related entities we can actually make a User Entity jsut by creating a Member Product
        // this is because the associations from MemberProduct->Member->User has been defined at tests/_support/helper/Factories.php
        $memberProduct = $this->tester->have(MemberProduct::class);

        $this->tester->seeInDatabase('user', ['user_id' => $memberProduct->getCustomer()->getUser()->getId()]);
    }

    public function testCreatingCustomParentEntities()
    {
        // on some cases you might want to create a customized entity and set it as an associated entity of a generated data
        $referrer = $this->tester->have(Member::class, [
            'fullName' => 'Mark Anthony Rosario'
        ]);

        $referralA = $this->tester->have(Member::class, [
            'referrer' => $referrer
        ]);

        $referralB = $this->tester->have(Member::class, [
            'referrer' => $referrer
        ]);

        $this->tester->seeInDatabase('customer', ['customer_full_name' => 'Mark Anthony Rosario']);
        $this->tester->seeInDatabase('customer', [
                'customer_id' => $referralA->getId(),
                'customer_affiliate_id' => $referrer->getId(),
            ]
        );
        $this->tester->seeInDatabase('customer', [
                'customer_id' => $referralB->getId(),
                'customer_affiliate_id' => $referrer->getId(),
            ]
        );
    }

    public function testCreatingMultipleEntities()
    {
        $em = $this->getModule('Doctrine2')->_getEntityManager();
        $currency = $em->getRepository(Currency::class)->findByCode('EUR');

        $this->tester->have(Member::class, [
            'fullName' => 'Mark Anthony Rosario',
            'currency' => $currency,
        ]);
        $referrer = $this->tester->have(Member::class, [
            'fullName' => 'Mark Anthony Rosario',
            'currency' => $currency,
        ]);

        // we can also instantly generate lots of data
        $this->tester->haveMultiple(Member::class, 50, [
            'referrer' => $referrer,
            'currency' => $currency,
        ]);

        $this->tester->seeNumRecords(50, 'customer', [
            'customer_affiliate_id' => $referrer->getId(),
        ]);
    }
}