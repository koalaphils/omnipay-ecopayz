{% extends 'TransactionBundle:Transaction:transaction.html.twig' %}

{% form_theme form with ["TransactionBundle:Transaction/Theme:script.html.twig", "TransactionBundle:Transaction/Theme:style.html.twig", "TransactionBundle:Transaction/Theme:form.html.twig", _self] %}

{% block breadcrumb -%}
    <li>{{ "breadcrumb.transaction"|trans({},"AppBundle") }}</li>
    <li>
        <a href="{{ path("transaction.list_page") }}">{{ "breadcrumb.list"|trans({},"TransactionBundle") }}</a>
    </li>
    <li class="active">{{ "menus.P2PTransfer"|trans({},"TransactionBundle") }}</li>
{%- endblock %}

{% block _Transaction_subTransactions_errors -%}
    {% if errors|length > 0 -%}
    <div class="alert alert-danger">
        <ul class="list-unstyled">
            {%- for error in errors -%}
                <li><span class="glyphicon glyphicon-exclamation-sign"></span> {{ error.message }}</li>
            {%- endfor -%}
        </ul>
    </div>
    {%- endif %}
{%- endblock %}

{% block _Transaction_subTransactions_row %}
    <div id="{{ form.vars.id }}" data-index="0" class="p2p-products">
        {{ form_errors(form) }}
        <div class="card-box" id="from-container">
            <h4 class="header-title m-b-30 m-t-0">
                From Products
                {%- if form.vars.addSubtransaction -%}
                &nbsp;&nbsp;|<button type="button" class="btn btn-success btn-xs m-l-10 btn-add-from-product"><i class="fa fa-plus" title="Add Product"></i></button>
                {%- endif %}
            </h4>
            <div class="from-product-list">
            </div>
        </div>
        <div class="card-box" id="to-container">
            <h4 class="header-title m-b-30 m-t-0">
                To Products
                {%- if form.vars.addSubtransaction -%}
                &nbsp;&nbsp;|<button type="button" class="btn btn-success btn-xs m-l-10 btn-add-to-product"><i class="fa fa-plus" title="Add Product"></i></button>
                {%- endif %}
            </h4>
            <div class="to-product-list">
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript">
        var products = null;
        function customerProductLoad(data) {
            products.clear();

            products.setProducts(data);

            {% for child in form.subTransactions.children -%}
                    {%- if child.vars.data.type == 2 -%}
                        products.add({
                            'type': '{{ child.vars.data.type }}',
                            'customerProduct': '{{ child.vars.data.customerProduct.id|default(null) }}',
                            'immutableCustomerProductData': '{{ child.vars.data.immutableCustomerProductData|default(null) }}',
                            'showImmutableCustomerProductData': '{{  child.vars.value.parent.isClosedForFurtherProcessing  }}',
                            'amount': '{{ child.vars.data.amount }}',
                            'enabled': false,
                            'renderTo': '.from-product-list',
                            'errors': {{ form_errors(child) }}
                        });
                    {%- endif -%}
                    {% else %}
                    products.add({
                        'type': 2,
                        'customerProduct': null,
                        'amount': 0,
                        'enabled': true,
                        'renderTo': '.from-product-list'
                    });
            {%- endfor %}
        }

        $(function() {
            $('#{{ form.customer.vars.id }}').on('select2:select', function(event) {
                products.clear();
                if(typeof $(this).select2('data')[0] != 'undefined') {
                    $('#from-container').removeClass('hide');
                }
            });

            $('.btn-add-from-product').click(function() {
                products.add({
                    'type': 2,
                    'customerProduct': null,
                    'amount': 0,
                    'enabled': true,
                    'renderTo': '.from-product-list'
                });
            });

            var subTransactionPrototype = '{{ form_row(form.subTransactions.vars.prototype)|e('js') }}';

            products = new Products("p2p_transfer",{
                'prototype': subTransactionPrototype,
                'elem': '#{{ form.subTransactions.vars.id }} .from-product-list'
            });

            $('#{{ form.customer.vars.id }}').trigger('select2:select');
        });
    </script>

    <script type="text/javascript">
        $(function() {
            $('#toCustomer').select2({
                'data': {{ toCustomer is null ? 'null' : ('[' ~ (toCustomer|serialize('json')|raw) ~ ']')|raw }},
                'minimumInputLength': 2,
                'minimumResultsForSearch': 'Infinity',
                'ajax': {
                    'url': '{{ path('customer.list') }}',
                    'type': 'POST',
                    'cache': true,
                    'data': function(params) {
                        var page = params.page || 1;
                        var length = 10;
                        var start = (page - 1) * length;
                        return {
                            'select2': 1,
                            'search': params.term,
                            'length': length,
                            'start': start,
                            'withCurrency': 1,
                            '_format': 'json'
                        };
                    },
                    'processResults': function(data, page) {
                        return {
                            'results': data.data,
                            'pagination': {
                                'more': (page * $(this).data('length')) < data.filtered
                            }
                        };
                    }
                },
                'templateResult': function(data) {
                    if (data.id === null || data.id === '' || !data.id) {
                        return data.text;
                    }

                    return '<i class="fa fa-user"></i> | ' + data.full_name + " (" + data.user.username + ")";
                },
                'templateSelection': function(data, container) {
                    if (data.id === null || data.id === '' || !data.id) {
                        return data.text;
                    }

                    return '<i class="fa fa-user"></i> | ' + data.full_name + " (" + data.user.username + ")";
                },
                'placeholder': {
                    'id': null,
                    'text': '<i class="fa fa-user"></i> | {{ "Select Member"|trans({}, "TransactionBundle") }}'
                },
                'escapeMarkup': function(markup) {
                    return markup;
                }
            });

            $('.btn-add-to-product').click(function() {
                var prod = products.add({
                    'type': 1,
                    'customerProduct': null,
                    'amount': 0,
                    'enabled': true,
                    'renderTo': '.to-product-list'
                });
                if(typeof $('#{{ form.customer.vars.id }}').select2('data')[0] != 'undefined') {
                    if($('#{{ form.customer.vars.id }}').select2('data')[0].currency.id != $('#toCustomer').select2('data')[0].currency.id) {
                        prod.view.find('.col-md-4').append("<span class='converted'><b>"+ $('#toCustomer').select2('data')[0].currency.code +":</b> <span class='value'></span></span>");
                    }
                    prod.applySummary = function() {
                        var fromRate = $('#{{ form.customer.vars.id }}').select2('data')[0].currency.rate;
                        var toRate = $('#toCustomer').select2('data')[0].currency.rate;
                        var converted = (new Decimal(exchangeRate(this.info.amount, fromRate, toRate))).toFixed(2, 1);
                        $(this.view).find('.converted').find('.value').html(converted);

                        var isSubtransactionTypeDeposit = this.info.type == Global.transaction.type.deposit;
                        var isSubtransactionTypeWithdrawal = this.info.type == Global.transaction.type.withdraw;

                        if(this.list.type != 'p2p_transfer' || isSubtransactionTypeWithdrawal) {
                            var afterBalance = new Decimal(this.list.products[this.info.customerProduct].balance);
                        } else {
                            var afterBalance = new Decimal(this.list.toProducts[this.info.customerProduct].balance);
                        }
                        if (isSubtransactionTypeDeposit) {
                            afterBalance = afterBalance.plus(converted);
                        } else if(isSubtransactionTypeWithdrawal) {
                            // we convert towards the destination only, we dont convert the amount deducted from the source
                            afterBalance = afterBalance.minus(this.info.amount);
                        }

                        var customerProduct = null;
                        if(this.list.type != 'p2p_transfer' || isSubtransactionTypeWithdrawal ) {
                            customerProduct = this.list.products[this.info.customerProduct];
                        } else {
                            customerProduct = this.list.toProducts[this.info.customerProduct]
                        }

                        var summary = {
                            'amount': (new Decimal(converted)).toFixed(2,1),
                            'afterbalance': afterBalance.toFixed(2,1),
                            'customerProduct': customerProduct,
                            'index': this.index,
                            'type': this.info.type
                        };
                        summary['customerProduct']['balance'] = (new Decimal(summary['customerProduct']['balance'])).toFixed(2,1);
                        addSummaryInfo('subtransactions.' + this.index, summary);
                        applySummary();
                    };
                }
            });

            function displayCustomerGroups(customerData){

                var customerGroupText = '';
                if (Array.isArray(customerData.groups)) {
                    customerData.groups.forEach(function (row) {
                        customerGroupText += row.name + ', ';
                    });
                    $('.to-customer-data[data-field="groups"]').html(customerGroupText.replace(/,\s*$/, ""));
                }
            }


            // load a transaction and display its data
            $('#toCustomer').on('select2:select', function(event) {
                if($(this).select2('data')[0] !== undefined && $(this).select2('data')[0] !== null && $(this).select2('data')[0] !== '') {
                    var data = $(this).select2('data')[0];
                    objectExtend(data);

                    $('.to-customer-data').each(function() {
                        var field = $(this).data('field');
                        $(this).html(data.array_get(field));
                    });
                    displayCustomerGroups(data);
                    $.ajax({
                        'url': '{{ path('customerProduct.list_search', { 'id': '__id__' }) }}'.replace(/__id__/g, $(this).select2('data')[0]['id']),
                        'type': 'POST',
                        'data': {
                            'isActive': true
                        },
                        'allowClear': true,
                        'success': function(data) {
                            $('#to-container').removeClass('hide');

                            products.clearTo();

                            products.setToProducts(data);

                            {% for child in form.subTransactions.children -%}
                                    {%- if child.vars.data.type == 1 -%}
                                        var prod = products.add({
                                            'type': '{{ child.vars.data.type }}',
                                            'customerProduct': '{{ child.vars.data.customerProduct.id|default(null) }}',
                                            'immutableCustomerProductData': '{{ child.vars.data.immutableCustomerProductData|default(null) }}',
                                            'showImmutableCustomerProductData': '{{  child.vars.value.parent.isClosedForFurtherProcessing  }}',
                                            'amount': '{{ child.vars.data.amount }}',
                                            'enabled': false,
                                            'renderTo': '.to-product-list',
                                            'errors': {{ form_errors(child) }}
                                        });
                                        if(typeof $('#{{ form.customer.vars.id }}').select2('data')[0] != 'undefined') {
                                            if($('#{{ form.customer.vars.id }}').select2('data')[0].currency.id != $('#toCustomer').select2('data')[0].currency.id) {
                                                prod.view.find('.col-md-4').append("<span class='converted'><b>"+ $('#toCustomer').select2('data')[0].currency.code +":</b> <span class='value'></span></span>");
                                            }
                                            prod.applySummary = function() {
                                                var converted = (new Decimal({{ child.vars.data.details.convertedAmount|default(child.vars.data.amount) }})).toFixed(2, 1);
                                                $(this.view).find('.converted').find('.value').html(converted);

                                                if(this.list.type != 'p2p_transfer' || this.info.type == Global.transaction.type.withdraw) {
                                                    var afterBalance = new Decimal(this.list.products[this.info.customerProduct].balance);
                                                } else {
                                                    var afterBalance = new Decimal(this.list.toProducts[this.info.customerProduct].balance);
                                                }
                                                if(this.info.type == Global.transaction.type.deposit) {
                                                    afterBalance = afterBalance.plus(converted);
                                                } else if(this.info.type == Global.transaction.type.withdraw) {
                                                    afterBalance = afterBalance.minus(converted);
                                                }

                                                var customerProduct = null;
                                                if(this.list.type != 'p2p_transfer' || this.info.type == Global.transaction.type.withdraw) {
                                                    customerProduct = this.list.products[this.info.customerProduct];
                                                } else {
                                                    customerProduct = this.list.toProducts[this.info.customerProduct]
                                                }

                                                var summary = {
                                                    'amount': (new Decimal(converted)).toFixed(2,1),
                                                    'afterbalance': afterBalance.toFixed(2,1),
                                                    'customerProduct': customerProduct,
                                                    'index': this.index,
                                                    'type': this.info.type
                                                };
                                                summary['customerProduct']['balance'] = (new Decimal(summary['customerProduct']['balance'])).toFixed(2,1);
                                                addSummaryInfo('subtransactions.' + this.index, summary);
                                                applySummary();
                                            };
                                            prod.applySummary();
                                        }
                                    {%- endif -%}
                            {% else %}
                            $('.btn-add-to-product').click();
                            {%- endfor %}

                        }
                    });

                }
            });
            $('#toCustomer').trigger('select2:select');
        });
    </script>
{% endblock %}

{% block summary_template %}
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:output method="xml"/>
    <xsl:template match="transaction">
        <div class='card-box'>
        <div class='card-box'>
            <div class='row'>
                <div class='col-md-6 col-sm-12 col-xs-12'>
                    <b>{{ "Status"|trans({},"TransactionBundle") }}</b>
                </div>
                <div class='col-md-6 col-sm-12 col-xs-12 '>
                    <xsl:choose>
                        <xsl:when test="statusinfo/id = 2 and voided = 1">
                            <span class="label label-danger">{{ "Voided"|trans({}, "TransactionBundle") }}</span>
                        </xsl:when>
                        <xsl:when test="statusinfo/id = 3">
                            <span class="label label-danger"><xsl:value-of select="statusinfo/label"/></span>
                        </xsl:when>
                        <xsl:otherwise>
                            <span class="label label-success"><xsl:value-of select="statusinfo/label"/></span>
                        </xsl:otherwise>
                    </xsl:choose>
                </div>
            </div>
            <div class='row'>
                <div class='col-md-12 col-sm-12 col-xs-12'>
                    <b>{{ "Transaction Number"|trans({},"TransactionBundle") }}</b>
                </div>
                <div class='col-md-12 col-sm-12 col-xs-12 '>
                    <span><xsl:value-of select="number"/></span>
                </div>
            </div>
        </div>
        <div class='card-box'>
            <h4 class="header-title m-t-0">{{ "Products"|trans({}, "TransactionBundle") }}</h4>
            <hr />
            <xsl:choose>
                <xsl:when test='not ((status = 2) or (status = 3))'>
                <div class='row'>
                    <div class='col-sm-5 col-xs-5'><b>{{ "Product"|trans({}, "TransactionBundle") }}</b></div>
                    <div class='col-sm-4 col-xs-4'><b>{{ "Current"|trans({}, "TransactionBundle") }}</b></div>
                    <div class='col-sm-3 col-xs-3'><b>{{ "After"|trans({}, "TransactionBundle") }}</b></div>
                </div>
                <xsl:for-each select="subtransactions/i">
                    <div class='row subtransaction'>
                        <xsl:attribute name='data-index'>
                            <xsl:value-of select='index' />
                        </xsl:attribute>
                        <xsl:choose>
                            <xsl:when test="customerproduct/immutablecustomerproductdata">
                                <div class='col-sm-5 col-xs-5'><span><xsl:value-of select="customerproduct/product/name"/></span> (<span><xsl:value-of select="customerproduct/immutablecustomerproductdata"/></span>)</div>
                            </xsl:when>
                            <xsl:otherwise>
                                <div class='col-sm-5 col-xs-5'><span><xsl:value-of select="customerproduct/product/name"/></span> (<span><xsl:value-of select="customerproduct/username"/></span>)</div>
                            </xsl:otherwise>
                        </xsl:choose>
                        <div class='col-sm-4 col-xs-4'><span><xsl:value-of select="customerproduct/balance"/></span></div>
                        <div class='col-sm-3 col-xs-3'><span><xsl:value-of select="afterbalance"/></span></div>
                    </div>
                </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                <div class='row'>
                    <div class='col-sm-4 col-xs-4'><b>{{ "Product"|trans({}, "TransactionBundle") }}</b></div>
                    <div class='col-sm-8 col-xs-8'><b>{{ "Balance"|trans({}, "TransactionBundle") }}</b></div>
                </div>
                <xsl:for-each select="subtransactions/i">
                    <div class='row subtransaction'>
                        <xsl:attribute name='data-index'>
                            <xsl:value-of select='index' />
                        </xsl:attribute>
                        <xsl:choose>
                            <xsl:when test="customerproduct/immutablecustomerproductdata">
                                <div class='col-sm-4 col-xs-4'><span><xsl:value-of select="customerproduct/product/name"/></span> (<span><xsl:value-of select="customerproduct/immutablecustomerproductdata"/></span>)</div>
                            </xsl:when>
                            <xsl:otherwise>
                                <div class='col-sm-4 col-xs-4'><span><xsl:value-of select="customerproduct/product/name"/></span> (<span><xsl:value-of select="customerproduct/username"/></span>)</div>
                            </xsl:otherwise>
                        </xsl:choose>
                        <div class='col-sm-8 col-xs-8'><span><xsl:value-of select="customerproduct/balance"/></span></div>
                    </div>
                </xsl:for-each>
                </xsl:otherwise>
            </xsl:choose>
        </div>

        <div class='card-box'>
            <div class='row'>
                <div class='col-md-6 col-sm-6 col-xs-6'>
                    <b>{{ "Total Amount"|trans({},"TransactionBundle") }}</b>
                </div>
                <div class='col-md-6 col-sm-6 col-xs-6 '>
                    <span><xsl:value-of select="sum_withdraw_products"/></span>
                </div>
            </div>
        </div>
        </div>
    </xsl:template>

</xsl:stylesheet>
{% endblock %}

{% block _Transaction_customerFee_widget %}
{% endblock %}

{% block _Transaction_companyFee_widget %}
{% endblock %}



{% block left_pane %}
    {{ block('customer') }}
    {{ block('paymentOption') }}
    {{ block('gateway') }}
    <div class="card-box customer-box">
        <h4 class="m-t-0 m-b-30 header-title">{{ "To Member"|trans({},'TransactionBundle') }}</h4>
        <div class="form-group">
            <select class="form-control" id="toCustomer" name="toCustomer"></select>
        </div>

        <div class="text-muted">
            <div class="row m-t-10">
                <div class="col-md-3 col-sm-3 col-xs-3 text-right"><b>Username:</b></div>
                <div class="col-md-8 col-sm-8 col-xs-8 m-l-15 to-customer-data" data-field="user.username"></div>
            </div>
            <div class="row m-t-10">
                <div class="col-md-3 col-sm-3 col-xs-3 text-right"><b>Groups:</b></div>
                <div class="col-md-8 col-sm-8 col-xs-8 m-l-15 to-customer-data" data-field="groups"></div>
            </div>
        </div>
    </div>
{% endblock left_pane %}

{% block gateway %}
    <div class="card-box hide" id="gateway-container">
        <h4 class="m-t-0 m-b-30 header-title">{{ "Payment Gateway"|trans({},'TransactionBundle') }}</h4>
        <div class="form-group {% if form.gateway.vars.errors|length > 0 %} has-error {% endif %}">
            {{ form_widget(form.gateway) }}
            {{ form_errors(form.gateway) }}
        </div>
        <div class="text-muted">
            <div class="text-muted">
                <div class="row m-t-10">
                    <div class="col-md-3 text-right"><b>Currency:</b></div>
                    <div class="col-md-8 m-l-15 gateway-data" data-field="currency.name"></div>
                </div>
            </div>
        </div>
    </div>
{% endblock gateway %}

{% block customer %}
    <div class="card-box customer-box">
        <h4 class="m-t-0 m-b-30 header-title">{{ "From Member"|trans({},'TransactionBundle') }}</h4>
        <div class="form-group {% if form.customer.vars.errors|length > 0 %} has-error {% endif %}">
            {{ form_widget(form.customer) }}
            {{ form_errors(form.customer) }}
        </div>

        <div class="text-muted">
            <div class="row m-t-10">
                <div class="col-md-3 col-sm-3 col-xs-3 text-right"><b>Username:</b></div>
                <div class="col-md-8 col-sm-8 col-xs-8 m-l-15 customer-data" data-field="user.username"></div>
            </div>
            <div class="row m-t-10">
                <div class="col-md-3 col-sm-3 col-xs-3 text-right"><b>Groups:</b></div>
                <div class="col-md-8 col-sm-8 col-xs-8 m-l-15 customer-data" data-field="groups"></div>
            </div>
        </div>
    </div>
{% endblock customer %}