{% extends 'AppBundle:Layout:base.html.twig' %}

{% block stylesheet_plugins %}
    {{ form_assetcss(form) }}
{% endblock %}

{% block javascript_plugins %}
    {{ form_assetjs(form) }}
{% endblock %}


{% block stylesheets %}
    {{ form_stylesheet(form) }}
    <style type="text/css">
        .select2-container--disabled .select2-selection {
            background-color: rgba(0,0,0,0)!important;
        }
    </style>
{% endblock %}

{% block breadcrumb -%}
    <li>{{ "breadcrumb.transaction"|trans({},"AppBundle") }}</li>
    <li>
        <a href="{{ path("transaction.list_page") }}">{{ "breadcrumb.list"|trans({},"TransactionBundle") }}</a>
    </li>
    <li class="{{ transaction.id|default(false) ? "" : "active" }}">

    </li>
    {% if transaction.id|default(false) %}
    <li class="active">
        {{ transaction.number }}
    </li>
    {% endif %}
{%- endblock %}

{% block page %}
    {{ form(form) }}
{% endblock %}

{% block summary_template %}
{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="{{ asset("bundles/app/js/equation_parser.js") }}"></script>
    <script type="text/javascript" src="{{ asset("bundles/app/js/currency_exchangeRate.js") }}"></script>
    <script type="text/javascript">
        var eparse = new EqParse();
        var SummaryObject = function(data, options) {
            this.data = data;
            this.options = options;
        }

        SummaryObject.prototype.process = function(forceProcess) {
            forceProcess = forceProcess || false;
            var sum = {
                'product': new Decimal(0),
                'deposit': new Decimal(0),
                'withdraw': new Decimal(0)
            };
            var total = {
                'customerFee': new Decimal(0),
                'companyFee': new Decimal(0),
                'amount': new Decimal(0),
                'customer': new Decimal(0)
            };
            for(var i in this.data.subtransactions) {
                var subtransaction = this.data.subtransactions[i];
                subtransaction.fees = subtransaction.fees || {};
                sum.product = sum.product.plus(subtransaction.amount || 0);
                if (subtransaction.type == 2) {
                    sum.withdraw = sum.withdraw.plus(subtransaction.amount || 0);
                } else if (subtransaction.type == 1) {
                    sum.deposit = sum.deposit.plus(subtransaction.amount || 0);
                }

                total.customerFee = total.customerFee.plus(subtransaction.fees.customerFee || 0);
                total.companyFee = total.companyFee.plus(subtransaction.fees.companyFee || 0);
            }

            total.customerFee = total.customerFee.plus(this.data.fees.customerFee || 0);
            total.companyFee = total.companyFee.plus(this.data.fees.companyFee || 0);
            var values = {
                'sum_products': sum.product.toFixed(2,1),
                'sum_withdraw_products': sum.withdraw.toFixed(2,1),
                'sum_deposit_products': sum.deposit.toFixed(2,1),
                'total_customer_fee': total.customerFee.toFixed(2,1),
                'total_company_fee': total.companyFee.toFixed(2,1),
                'company_fee': (new Decimal(this.data.fees.companyFee || 0)).toFixed(2,1),
                'customer_fee': (new Decimal(this.data.fees.customerFee || 0)).toFixed(2,1)
            };
            total.amount = this.processEquation(this.options.equations.totalAmount.equation, this.options.equations.totalAmount.variables, values);
            total.customer = this.processEquation(this.options.equations.customerAmount.equation, this.options.equations.customerAmount.variables, values);

            values['total_amount'] = (new Decimal(total.amount)).toFixed(2,1);
            values['customer_amount'] = (new Decimal(total.customer)).toFixed(2,1);
            values['status'] = this.options.status;

            if(typeof this.options.equations.gateway != 'undefined') {
                var vr = {};
                for(var i in this.options.equations.gateway.variables) {
                    var vv = this.options.equations.gateway.variables[i];
                    vr[vv.var] = vv.value;
                }
                this.data.gateway.afterbalance = (new Decimal(this.processEquation(this.data.gateway.balance + this.options.equations.gateway.equation, vr, values))).toFixed(2,1);
            }

            this.data = $.extend(true, this.data, values);
            return values;
        }

        SummaryObject.prototype.processEquation = function(equation, vars, predefineValues) {
            vars = vars || {};
            var vr = {};
            for(var i in vars) {
                if (typeof predefineValues[vars[i]] != 'undefined') {
                    vr[i] = predefineValues[vars[i]];
                } else {
                    vr[i] = vars[i]
                }
            }
            return eparse.parse(equation, vr, true);
        }

        SummaryObject.prototype.getAll = function() {
            return this.data;
        }

        SummaryObject.prototype.getField = function(key) {
            var data = this.data;
            var arr = key.split('.');

            for(var i = 0; i < arr.length; i++){
                data = data[arr[i]] != undefined ? data[arr[i]] : '';
            }

            return data;
        };

        SummaryObject.prototype.removeField = function(key) {
            var parts = key.split('.');
            var strPart = "['" + parts.join("']['") + "']";
            eval("delete this.data" + strPart + ";");
        };

        SummaryObject.prototype.loopSet = function(key, value) {
            var data = {};
            var arr = key.split('.',2);
            if(arr.length > 1) {
                data[key] = this.loopSet(arr[1], value);
            } else {
                data[key] = value;
            }
            return data;
        };
        SummaryObject.prototype.setField = function(key, value) {
            var arr = key.split('.',2);
            var _data  = {};
            if(arr.length > 1) {
                _data[arr[0]] = this.loopSet(arr[1], value);
            } else {
                _data[arr[0]] = value;
            }
            this.data = $.extend(true, this.data, _data);
        };

        var transactionInfo = new SummaryObject({
            'number': "{{ form.number.vars.value }}",
            'statusInfo': {{ (setting('transaction.status.' ~ transaction.status, {})|merge({"id": transaction.status}))|json_encode()|raw }},
            'voided': {{ transaction.isVoided == 0 ? '0' : '1'  }},
            'subtransactions': [],
            'fees': {
                'customerFee': {{ form.customerFee.vars.value|default(null) == null ? "null" : form.customerFee.vars.value }},
                'companyFee': {{ form.companyFee.vars.value|default(null) == null ? "null" : form.companyFee.vars.value }}
            }
        }, {
            'status': {{ form.vars.data.status  }},
            'equations': {{ setting('transaction.equations.' ~ (app.request.get('type')), false)|json_encode()|raw }}
        });

        var summaryTemplate = "{{ block('summary_template')|escape('js') }}";
        summaryTemplate = new XslTemplate(summaryTemplate, false);

        function applySummary() {
            transactionInfo.process();
            var _temp = $("<div></div>").html(summaryTemplate.apply(json2Xml(transactionInfo.getAll(), "transaction"))).html();
            $('#summary').html(_temp);
        }

        function addSummaryInfo(index, value) {
            transactionInfo.setField(index, value);
        }

        function removeSummaryInfo(index) {
            transactionInfo.removeField(index);
        }

        applySummary();

    </script>
    {{ form_javascript(form) }}
{% endblock %}