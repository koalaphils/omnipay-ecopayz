<?php

namespace DbBundle\Repository;

/**
 * GatewayRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GatewayRepository extends BaseRepository
{
    /**
     * @param int $id
     * @param int $hydrationMode
     *
     * @return \DbBundle\Entity\Gateway
     */
    public function findById($id, $hydrationMode = \Doctrine\ORM\Query::HYDRATE_OBJECT)
    {
        $qb = $this->createQueryBuilder('g');
        $qb->leftJoin('g.currency', 'c');
        $qb->select('g, PARTIAL c.{id, code, name, rate}');
        $qb->where('g.id = :id')->setParameter('id', $id);

        return $qb->getQuery()->getSingleResult($hydrationMode);
    }

    public function getWithCurrency($id, $hydrationMode = \Doctrine\ORM\Query::HYDRATE_OBJECT)
    {
        $qb = $this->createQueryBuilder('g');
        $qb->select('g, cu');
        $qb->join('g.currency', 'cu')
                ->where('g.id = :id')
                ->setParameter('id', $id);

        return $qb->getQuery()->getSingleResult($hydrationMode);
    }

    /**
     * Create Query Builder.
     *
     * @param array | null $filters
     *
     * @return Doctrine/ORM/EntityRepository
     */
    public function getGatewayListQb($filters)
    {
        $qb = $this->createQueryBuilder('g');
        $qb->leftJoin('g.currency', 'c');

        if (isset($filters['search'])) {
            $qb->andWhere($qb->expr()->orX()->addMultiple([
                'g.name LIKE :search',
            ]))->setParameter('search', '%' . $filters['search'] . '%');
        }

        if (array_has($filters, 'currency') && !empty($filters['currency'])) {
            $qb->andWhere('c.id = :currency')->setParameter('currency', $filters['currency']);
        }

        if (array_has($filters, 'paymentOption')  && !empty($filters['paymentOption'])) {
            $qb->andWhere('g.paymentOption = :paymentOption')->setParameter('paymentOption', $filters['paymentOption']);
        }

        if (array_has($filters, 'currencyName') && !empty($filters['currencyName'])) {
            $qb->andWhere('c.name = :currencyName')->setParameter('currencyName', $filters['currencyName']);
        }
        
        if (array_has($filters, 'currencies') && !empty($filters['currencies'])) {
            $qb->andWhere('c.id IN (:currencies)')->setParameter('currencies', $filters['currencies']);
        }

        if (array_has($filters, 'currencyCode') && !empty($filters['currencyCode'])) {
            $qb->andWhere('c.code = :currencyCode')->setParameter('currencyCode', $filters['currencyCode']);
        }
        
        $groupFilters = [];
        if (array_has($filters, 'filter')) {
            $groupFilters = array_get($filters, 'filter');
        }

        if (!empty($groupFilters)) {
            if (!empty(array_get($groupFilters, 'currency', []))) {
                $qb->andWhere('c.id IN (:currency)')->setParameter('currency', $groupFilters['currency']);
            }

            if (!empty(array_get($groupFilters, 'status', []))) {
                $qb->andWhere('g.isActive IN (:status)')->setParameter('status', $groupFilters['status']);
            }

            if (!empty(array_get($groupFilters, 'from', ''))) {
                $qb->andWhere('g.createdAt >= :from');
                $qb->setParameter('from', new \DateTime($groupFilters['from']));
            }

            if (!empty(array_get($groupFilters, 'to', ''))) {
                $qb->andWhere('g.createdAt < :to');
                $qb->setParameter('to', (new \DateTime($groupFilters['to'] . '+1 day')));
            }

            if (!empty(array_get($groupFilters, 'paymentOption', []))) {
                $exp = $qb->expr()->orX();
                foreach ($groupFilters['paymentOption'] as $i => $option) {
                    $exp->add('g.paymentOption = :po_' . $i);
                    $qb->setParameter('po_' . $i, $option);
                }
                $qb->andWhere($exp);
            }
        }

        return $qb;
    }

    public function getGatewayList($filters = null, $orders = [], $hydrationMode = \Doctrine\ORM\Query::HYDRATE_ARRAY)
    {
        $qb = $this->getGatewayListQb($filters);
        $qb->select('PARTIAL g.{id, name, paymentOption, isActive, balance, details, levels}, PARTIAL c.{id, code, name, rate}');

        if (empty($orders)) {
            $orders = [
                [
                    'column' => 'g.createdAt',
                    'dir' => 'DESC',
                ],
            ];
        }

        foreach ($orders as $order) {
            $qb->addOrderBy($order['column'], $order['dir']);
        }

        if (isset($filters['length'])) {
            $qb->setMaxResults($filters['length']);
        }
        if (isset($filters['start'])) {
            $qb->setFirstResult($filters['start']);
        }

        return $qb->getQuery()->getResult($hydrationMode);
    }

    public function getGatewayListFilterCount($filters = null)
    {
        $qb = $this->getGatewayListQb($filters);
        $qb->select('COUNT(g.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getGatewayListAllCount()
    {
        $qb = $this->createQueryBuilder('g');
        $qb->select('COUNT(g.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findByLevel($level, $hydrationMode = \Doctrine\ORM\Query::HYDRATE_OBJECT)
    {
        $qb = $this->createQueryBuilder('g');
        $qb->where('JSON_CONTAINS(g.levels, :level) = 1');
        $qb->innerJoin('g.currency', 'c');
        $qb->setParameter('level', "$level");
        $qb->select('g, c');

        return $qb->getQuery()->getSingleResult($hydrationMode);
    }

    public function findByLevels($levels, $hydrationMode = \Doctrine\ORM\Query::HYDRATE_OBJECT)
    {
        $qb = $this->createQueryBuilder('g');
        if (!is_array($levels)) {
            $levels = [$levels];
        }

        foreach ($levels as $key => $level) {
            $qb->orWhere("JSON_CONTAINS(g.levels, :level$key) = 1")->setParameter("level$key", "$level");
        }

        $qb->innerJoin('g.currency', 'c');
        $qb->select('g, c');

        return $qb->getQuery()->getResult($hydrationMode);
    }

    public function findByGroup($groups, $hydrationMode = \Doctrine\ORM\Query::HYDRATE_OBJECT)
    {
        $qb = $this->createQueryBuilder('g');
        $qb->leftJoin('g.groups', 'gg');
        $qb->select('g');
        $qb->andWhere('gg.customerGroup IN (:groups)')->setParameter('groups', $groups);

        return $qb->getQuery()->getResult($hydrationMode);
    }
}
