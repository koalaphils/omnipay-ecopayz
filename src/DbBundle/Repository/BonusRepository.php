<?php

namespace DbBundle\Repository;

use DbBundle\Entity\Bonus;

/**
 * BonusRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BonusRepository extends BaseRepository
{
    public function findById($id, $hydrationMode = \Doctrine\ORM\Query::HYDRATE_OBJECT)
    {
        $qb = $this->createQueryBuilder('b');
        $qb->select('b');
        $qb->where('b.id = :id')->setParameter('id', $id);

        return $qb->getQuery()->getSingleResult($hydrationMode);
    }

    /**
     * @param array | null $filters
     *
     * @return Doctrine/ORM/EntityRepository
     */
    public function getListQb($filters)
    {
        $qb = $this->createQueryBuilder('b');

        if (isset($filters['isActive'])) {
            $qb->andWhere($qb->expr()->andX('b.isActive = :isActive'))->setParameter('isActive', $filters['isActive']);
        }

        if (isset($filters['search'])) {
            $qb->andWhere($qb->expr()->orX()->addMultiple([
                'b.subject LIKE :search',
            ]))->setParameter('search', '%' . $filters['search'] . '%');
        }

        $qb->andWhere('b.deletedAt IS NULL');

        return $qb;
    }

    public function getList($filters = null)
    {
        $qb = $this->getListQb($filters);
        $qb->select('PARTIAL b.{id, subject, isActive, terms, image, startAt, endAt, deletedAt}');

        if (isset($filters['length'])) {
            $qb->setMaxResults($filters['length']);
        }
        if (isset($filters['start'])) {
            $qb->setFirstResult($filters['start']);
        }

        return $qb->getQuery()->getArrayResult();
    }

    public function getListFilterCount($filters = null)
    {
        $qb = $this->getListQb($filters);
        $qb->select('COUNT(b.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getListAllCount()
    {
        $qb = $this->createQueryBuilder('b');
        $qb->select('COUNT(b.id)');
        $qb->andWhere('b.deletedAt IS NULL');

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @param Bonus $bonus
     */
    public function delete(Bonus $bonus)
    {
        $bonus->setDeletedAt(new \DateTime());
        $this->save($bonus);
    }
}
