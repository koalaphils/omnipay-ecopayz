<?php

namespace DbBundle\Repository;

use DateTime;
use DbBundle\Entity\Product;
use Doctrine\ORM\Query;

/**
 * ProductRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends BaseRepository
{
    public function findById($id, $hydrationMode = Query::HYDRATE_OBJECT)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select(
            'PARTIAL p.{id, name, code}'
        );
        $qb->where('p.id = :id')->setParameter('id', $id);

        return $qb->getQuery()->getSingleResult($hydrationMode);
    }

    public function getProductNotInIds(array $productIds = []): array
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('PARTIAL p.{id, name, code, url, isActive, details}');

        if (!empty($productIds)) {
            $qb->where($qb->expr()->notIn('p.id', ':productIds'))
                ->setParameter('productIds', $productIds);
        }

        return $qb->getQuery()->getResult();
    }

    public function getProductByIds($productIds)
    {
        $qb = $this->createQueryBuilder('p');

        $qb->select('PARTIAL p.{id, name, code, url, isActive, details}')
            ->where($qb->expr()->in('p.id', ':productIds'))
            ->setParameter('productIds', $productIds);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Create Query Builder.
     *
     * @param array | null $filters
     *
     * @return Doctrine/ORM/EntityRepository
     */
    public function getProductListQb($filters)
    {
        $status = true;
        $qb = $this->createQueryBuilder('p');
        $qb->andWhere('p.deletedAt IS NULL');

        if (array_has($filters, 'isActive')) {
            $qb->andWhere($qb->expr()->andX('p.isActive = :isActive'))->setParameter('isActive', $filters['isActive']);
        }

        if (isset($filters['excludeAcWallet']) && array_get($filters, 'excludeAcWallet', false) === true) {
            $qb
                ->andWhere('(JSON_CONTAINS(p.details, :acWalletTag) = 0 OR p.details IS NULL)')
                ->setParameter('acWalletTag', json_encode(['ac_wallet' => true]))
            ;
        }

        if (array_has($filters, 'search') && !empty($filters['search'])) {
            $qb->andWhere($qb->expr()->orX()->addMultiple([
                'p.code LIKE :search',
                'p.name LIKE :search',
            ]))->setParameter('search', '%' . $filters['search'] . '%');
        }

        $groupFilters = [];
        if (array_has($filters, 'filter')) {
            $groupFilters = array_get($filters, 'filter');
        }

        if (!empty($groupFilters)) {
            if (!empty(array_get($groupFilters, 'status', []))) {
                $qb->andWhere('p.isActive IN (:status)')->setParameter('status', $groupFilters['status']);
            }

            if (!empty(array_get($groupFilters, 'from', ''))) {
                $qb->andWhere('p.createdAt >= :from');
                $qb->setParameter('from', new DateTime($groupFilters['from']));
            }

            if (!empty(array_get($groupFilters, 'to', ''))) {
                $qb->andWhere('p.createdAt < :to');
                $qb->setParameter('to', (new DateTime($groupFilters['to'] . '+1 day')));
            }
        }

        return $qb;
    }

    public function getProductList($filters = null, array $orders = [])
    {
        $qb = $this->getProductListQb($filters);
        $qb->select('PARTIAL p.{id, name, code, url, isActive, details, deletedAt}');

        if (!empty($orders)) {
            foreach ($orders as $order) {
                $qb->addOrderBy($order['column'], $order['dir']);
            }
        }

        if (isset($filters['length'])) {
            $qb->setMaxResults($filters['length']);
        }
        if (isset($filters['start'])) {
            $qb->setFirstResult($filters['start']);
        }

        return $qb->getQuery()->getArrayResult();
    }

    public function getProductListFilterCount($filters = null)
    {
        $status = true;
        $qb = $this->getProductListQb($filters);
        $qb->select('COUNT(p.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getProductListAllCount()
    {
        $status = true;
        $qb = $this->createQueryBuilder('p');
        $qb->select('COUNT(p.id)');
        //$qb->where($qb->expr()->andX('p.isActive = 1'));

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function save($entity): void
    {
        $this->getEntityManager()->persist($entity);
        $this->getEntityManager()->flush($entity);
    }

    public function getPiwiWalletProduct(): ?Product
    {
        $queryBuilder = $this->createQueryBuilder('product')
            ->select('product')
            ->where("JSON_EXTRACT(product.details, '$.piwi_wallet') IS NOT NULL");

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    public function getProductByCode(string $code): Product
    {
        $qb = $this->createQueryBuilder('p');
        $qb->andWhere('p.code = :code')->setParameter('code', $code);

        return $qb->getQuery()->getSingleResult();
    }
}
