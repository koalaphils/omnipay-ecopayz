{% extends 'AppBundle:Layout:base.html.twig' %}

{% block title %}{{ "page.title.list"|trans({},"CustomerBundle") }}{% endblock %} 

{% block stylesheets %}
    <!-- DataTables -->
    <link href="{{ asset('assets/plugins/datatables/jquery.dataTables.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/buttons.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/responsive.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/dataTables.colVis.css') }}" rel="stylesheet" type="text/css"/>
    <link href="{{ asset('assets/plugins/datatables/dataTables.bootstrap.min.css') }}" rel="stylesheet" type="text/css"/>

{% endblock %}

{% block pageTitle -%} {{ "menus.Customer"|trans({},"CustomerBundle") }} {%- endblock %}

{% block pageHeaderExtra %}
    <div class="pull-right">
        {% if is_granted('ROLE_CUSTOMER_CREATE') %}
        <a class="btn btn-primary waves-effect waves-light pull-right m-b-10" href="{{ path("customer.create_page") }}"> {{ ""|trans({},"CustomerBundle") }}<span><i class="ti-plus m-r-5"></i></span> Add Customer</a>
        {% endif %}
        <ul class="list-inline quicklinks font-13 font-normal text-right">
            {% if is_granted('ROLE_CUSTOMER_CREATE') %} 
            <li>Quick Links:</li>
            {% endif %}
            {% if is_granted('ROLE_CUSTOMER_CREATE') %} 
            <li><a href="{{ path("customer.create_page") }}"> {{ "quickLinks.addCustomer"|trans({},"CustomerBundle") }}</a></li>|
            {% endif %}
            {% if is_granted('ROLE_CUSTOMER_GROUP_VIEW') %} 
            <li><a href="{{ path("customer.group_list_page") }}"> {{ "quickLinks.customerGroup"|trans({},"CustomerBundle") }}</a></li>|
            {% endif %}
            {% if is_granted('ROLE_TRANSACTION_VIEW') %} 
            <li><a href="{{ path("transaction.list_page") }}"> {{ "Transaction List"|trans({},"CustomerBundle") }}</a></li>
            {% endif %}
        </ul>
    </div>
{% endblock pageHeaderExtra %}

{% block breadcrumb -%}
    <li>{{ "breadcrumb.member"|trans({},"AppBundle") }}</li>
    <li class="active">{{ "Customer List"|trans({},"CustomerBundle") }}</li>
{%- endblock %}

{% block page %}
    <div class="col-sm-12">
        <div class="card-box">
            <div id="customerList">
                <table
                    class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0"
                    width="100%">
                    <thead>
                        <tr>
                            <th>{{ "fields.id"|trans({}, "CustomerBundle") }}</th>
                            <th data-priority="1">{{ "fields.fullName"|trans({}, "CustomerBundle") }}</th>
                            <th>{{ "fields.username"|trans({}, "UserBundle") }}</th>
                            <th>{{ "fields.email"|trans({}, "CustomerBundle") }}</th>
                            <th>{{ "fields.country"|trans({}, "CustomerBundle") }}</th>
                            <th>{{ "fields.currency"|trans({}, "CustomerBundle") }}</th>
                            <th>{{ "fields.kyc"|trans({}, "CustomerBundle") }}</th>
                            <th>{{ "fields.joinedAt"|trans({}, "CustomerBundle") }}</th>
                            <th>{{ "fields.createdBy"|trans({}, "CustomerBundle") }}</th>
                            <th>{{ "fields.balance"|trans({}, "CustomerBundle") }}</th>
                            <th>{{ "fields.status"|trans({}, "CustomerBundle") }}</th>
                            <th data-priority="2">{{ "fields.action"|trans({}, "AppBundle") }}</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot></tfoot>
                </table>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('bundles/app/js/ZTable.js') }}"></script>

    <script>
        var userPreferences = {{ app.user.getPreference('ui.customer.list.column.visibility')|json_encode()|raw }};
        $(function () {
            var customerList = new ZTable('#customerList', {
                'ajax': {
                    'url': '{{- path("customer.list_search") -}}',
                    'data': function (data, dataTable) {
                        return {
                            'search': data.filters.search,
                            'length': data.length,
                            'start': dataTable.start,
                            'datatable': true,
                            'route': true,
                            'draw': dataTable.draw,
                            'order': data.order,
                            'isCustomer' : 1,
                            'filter' : data.filters
                        };
                    },
                    'dataFilter': function (str) {
                        return str;
                    }
                },
                'colvis': {
                    'hidden': function () {
                        var hidden = ['c.id', 'u.username', 'u.email', 'c.balance'];
                        for (var i in userPreferences) {
                            if (userPreferences[i] == 'false') {
                                hidden.push(eval(i));
                            }
                        }
                        return hidden;
                    },
                    'attrs': {
                        'colvisButton' : {
                            'data-style': 'btn-primary'
                        }
                    },
                    'exclude': ['c.id', 'u.username', 'u.email' , 'c.fName,c.lName', 'customer.action', 'c.balance']
                },
                'search': '{{ app.request.get("search", '') }}',
                'featuresDom': "<'form-inline'"
                        + "<'form-group m-r-10 ft-date'<'m-t-0 xs-date 'ft>>"
                        + "cskopydb"
                        + "<'form-group' <'m-t-10'>>>",
                'features': {
                    'from': {
                        'dom': "<'form-group form-group-sm m-r-10'<'input-group'i<^span 'input-group-addon bg-white text-default'<!'fa fa-calendar'!>>>>",
                        'type': 'date',
                        'label': 'From',
                        'symbol': 'f',
                        'attrs': {
                            'placeholder': 'From',
                            'type': 'input',
                            'class': 'form-control cls-date'
                        },
                        'applyOnChanged': false,
                        'value': '{{ app.request.get("from", '') }}'
                    },
                    'to': {
                        'dom': "<'form-group form-group-sm m-r-10'<'input-group'i<^span 'input-group-addon bg-white text-default'<!'fa fa-calendar'!>>>>",
                        'type': 'date',
                        'label': 'To',
                        'symbol': 't',
                        'attrs': {
                            'placeholder': 'To',
                            'type': 'input',
                            'class': 'form-control cls-date'
                        },
                        'applyOnChanged': false,
                        'value': '{{ app.request.get("to", '') }}'
                    },
                    'product': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'Products',
                        'symbol': 'p',
                        'class': 'selectpicker',
                        'waitByTable': true,
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'data-none-selected-text': 'Select Product',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'initialized': function (feature) {
                            $.ajax({
                                'url': '{{ path('product.list_search') }}',
                                'success': function (data) {
                                    var options = {};
                                    for (var i in data) {
                                        var option = $("<option value='" + data[i].id + "'>" + data[i].name + "</option>");
                                        if (feature.feature.value.indexOf(data[i].id + "") !== -1) {
                                            option.attr('selected', 'selected');
                                        }
                                        $(feature.input).append(option);
                                    }
                                    $(feature.input).selectpicker('refresh');
                                    feature.setToDone();
                                    feature.ztable.reloadTable();
                                }
                            });
                        },
                        'value': '{{ app.request.get("product", [])|json_encode|raw }}'
                    },
                    'paymentOption': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'P.O',
                        'symbol': 'o',
                        'class': 'selectpicker',
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'title': 'Select P.O',
                            'multiple': 'multiple',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'applyOnChanged': false,
                        'waitByTable': true,
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'initialized': function (feature) {
                            $.ajax({
                                'url': '{{ path('paymentoption.search') }}',
                                'data' : {'select2' : true },
                                'success': function (data) {
                                    for (var i in data.items) {
                                        var option = $("<option value='" + data.items[i].id + "'>" + data.items[i].text + "</option>");
                                        if (feature.feature.value.indexOf(data.items[i].id + "") !== -1) {
                                            option.attr('selected', 'selected');
                                        }
                                        $(feature.input).append(option);
                                    }
                                    $(feature.input).selectpicker('refresh');
                                    feature.setToDone();
                                    feature.ztable.reloadTable();
                                }
                            });
                        },
                        'value': '{{ app.request.get("paymentOption", [])|json_encode|raw }}',
                    },
                    'country': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'Country',
                        'symbol': 'y',
                        'class': 'selectpicker',
                        'waitByTable': true,
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'data-none-selected-text': 'Select Country',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'initialized': function (feature) {
                            $.ajax({
                                'url': '{{ path('country.list_search') }}',
                                'type': 'POST',
                                'success': function (data) {
                                    var options = {};
                                    for (var i in data) {
                                        var option = $("<option value='" + data[i].id + "'>" + data[i].name + "</option>");
                                        if (feature.feature.value.indexOf(data[i].id + "") !== -1) {
                                            option.attr('selected', 'selected');
                                        }
                                        $(feature.input).append(option);
                                    }
                                    $(feature.input).selectpicker('refresh');
                                    feature.setToDone();
                                    feature.ztable.reloadTable();
                                }
                            });
                        },
                        'value': '{{ app.request.get("country", [])|json_encode|raw }}'
                    },
                    'KYC': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'KYC Status',
                        'symbol': 'k',
                        'class': 'selectpicker',
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'data-none-selected-text': 'Select KYC',
                            'data-width': 'auto'
                        },
                        'applyOnChanged': false,
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'getValue': function (feature) {
                            var value = $(feature.input).val();
                            if (value === null) {
                                value = [];
                            }
                            var kycs = [];
                            if (value.length > 0 && value.indexOf('verified') !== Global.variables.indexNotFound) {
                                kycs.push(Global.customer.kyc.verified.value);
                            }
                            if (value.length > 0 && value.indexOf('unverified') !== Global.variables.indexNotFound) {
                                kycs.push(Global.customer.kyc.unverified.value);
                            }
                            return kycs;
                        },
                        'rendered': function (feature) {
                            $(feature.input).val(feature.feature.value);
                        },
                        'choices': {
                            'verified': 'Verified',
                            'unverified': 'Unverified'
                        },
                        'value': '{{ app.request.get("KYC", [])|json_encode|raw }}'
                    },
                    'currencies': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'Currency',
                        'symbol': 'c',
                        'class': 'selectpicker',
                        'waitByTable': true,
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'data-none-selected-text': 'Select Currency',
                            'data-width': 'auto',
                            'data-size': 5
                        },
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'initialized': function (feature) {
                            $.ajax({
                                'url': '{{ path('currency.list_search') }}',
                                'type': 'POST',
                                'success': function (data) {
                                    var options = {};
                                    for (var i in data) {
                                        var option = $("<option value='" + data[i].id + "'>" + data[i].name + "</option>");
                                        if (feature.feature.value.indexOf(data[i].id + "") !== -1) {
                                            option.attr('selected', 'selected');
                                        }
                                        $(feature.input).append(option);
                                    }
                                    $(feature.input).selectpicker('refresh');
                                    feature.setToDone();
                                    feature.ztable.reloadTable();
                                }
                            });
                        },
                        'value': '{{ app.request.get("currency", [])|json_encode|raw }}'
                    },
                    'status': {
                        'dom': "<'form-group form-group-sm m-r-10 xs-filter'i>",
                        'type': 'select',
                        'label': 'Customer Status',
                        'symbol': 's',
                        'class': 'selectpicker',
                        'attrs': {
                            'data-style': 'btn-white btn-sm',
                            'multiple': 'multiple',
                            'data-none-selected-text': 'Select Status',
                            'data-width': 'auto'
                            //'data-selected-text-format': 'count > 1'
                        },
                        'applyOnChanged': false,
                        'resetValue': function (feature) {
                            $(feature.input).selectpicker('val', feature.feature.value);
                        },
                        'getValue': function (feature) {
                            var value = $(feature.input).val();
                            if (value === null) {
                                value = [];
                            }
                            var statuses = [];
                            if (value.length > 0 && value.indexOf('enabled') !== Global.variables.indexNotFound) {
                                statuses.push(Global.customer.status.enabled.value);
                            }
                            if (value.length > 0 && value.indexOf('registered') !== Global.variables.indexNotFound) {
                                statuses.push(Global.customer.status.registered.value);
                            }
                            if (value.length > 0 && value.indexOf('suspended') !== Global.variables.indexNotFound) {
                                statuses.push(Global.customer.status.suspended.value);
                            }

                            return statuses;
                        },
                        'rendered': function (feature) {
                            $(feature.input).val(feature.feature.value);
                        },
                        'choices': {
                            'registered': 'Registered',
                            'enabled': 'Enabled',
                            'suspended': 'Suspended'
                        },
                        'value': '{{ app.request.get("status", [])|json_encode|raw }}'
                    },
                    'applyFilter': {
                        'type': 'button',
                        'label': 'Apply Filter',
                        'symbol': 'd',
                        'attrs': {
                            'type': 'button',
                            'class': 'btn btn-sm btn-default'
                        },
                        'initialized': function (feature) {
                            $(feature.input).click(function () {
                                feature.ztable.forceReloadTable();
                            });
                        }
                    },
                    'resetFilter': {
                        'type': 'button',
                        'label': 'Reset Filters',
                        'symbol': 'b',
                        'attrs': {
                            'type': 'button',
                            'class': 'btn btn-sm btn-inverse'
                        },
                        'initialized': function (feature) {
                            $(feature.input).click(function () {
                                $("select.ztable_length_input").val('10').change();
                                feature.ztable.reset();
                            });
                        }
                    }
                },
                'ordering': true,
                'columnDefs': [
                    { "orderable": false, "targets": [10,11] }
                ],
                'columns': [
                     {
                        'data': 'customer.id',
                        'defaultContent': '',
                        'name': 'c.id',
                        'render': function(data, type, full) {
                            return "<a href='"+full.routes.update+"'>"+data+"</a>";
                        }
                    },
                    {
                        'data': 'customer',
                        'defaultContent': '',
                        'name': 'c.fName,c.lName',
                        'render': function(data, type, full) {
                            var fullName = full.customer.fName + '&nbsp;' + full.customer.lName;
                            if (data.user.activationTimestamp !== null) {
                                fullName = fullName + "&nbsp;<i  class=' icon-user-following cls-activate' title='AMS Activated'></i>";
                            }
                            return fullName;
                        }
                    },
                    { 'data': 'customer.user.username', 'name': 'u.username', 'defaultContent': '' },
                    { 'data': 'customer.user.email', 'name': 'u.email', 'defaultContent': '' },
                    { 'data': 'customer.country.name', 'name': 'cco.name', 'defaultContent': '' },
                    { 'data': 'customer.currency.name', 'name': 'ccu.name', 'defaultContent': '' },
                    {
                        'data': 'customer.verifiedAt',
                        'name': 'c.verifiedAt',
                        'defaultContent': '',
                        'render': function(isVerified) {
                            return (isVerified) ? "Verified" : "Not Verified";
                        }
                    },
                    {
                        'data': 'customer.joinedAt',
                        'name': 'c.joinedAt',
                        'defaultContent': '',
                        'render': function (data) {
                            if (data !== null) {
                                return moment(data.date).format(Global.dateFormat);
                            }
                            return '';
                        }
                    },
                    { 'data': 'customer.user.creator.username', 'name': 'cr.username', 'defaultContent': '' },
                    {
                        'data': 'customer.balance',
                        'defaultContent': '',
                        'name': 'c.balance',
                        'render': function(data) {
                            return (new Decimal(data)).toFixed(2);
                        }
                    },
                    {
                        'data': 'customer',
                        'name': 'status',
                        'render': function (data, text, full) {
                            var status = 'Registered';
                            if (!data.details.enabled && data.user.isActive) {
                                status = 'Registered';
                            } else if (!data.user.isActive) {
                                status = 'Suspended';
                            } else if (data.details.enabled && data.user.isActive) {
                                status = 'Enabled';
                            }

                            return status;
                        }
                    },
                    {
                        'data': 'customer',
                        'name': 'customer.action',
                        'render': function(data, text, full) {
                            var action = "<a class='btn btn-primary waves-effect waves-light btn-xs ' title='Profile' href='" + full.routes.update + "/profile'><i class='ti-user'></i> </a>";
                            var finance = "<a action='transaction' href='" + full.routes.update + "/transactions' title='Transaction History' class='btn btn-icon waves-effect waves-light btn-xs btn-purple btn-icn active-state-action'><i class='ti-money'></i></a>";
                            var product = "<a action='product' href='" + full.routes.update + "/product' title='Product'  class='btn btn-icon waves-effect waves-light btn-warning btn-xs btn-icn active-state-action'> <i class='ti-bag'></i> </button>";
                            var convertAffiliate = "<a action='convertAffiliate'  title='Convert'  class='btn btn-icon waves-effect waves-light btn-success btn-xs btn-icn active-state-action btn-convert'> <i class='ti-loop'></i> </button>";

                            action = action + '' + finance;
                            action = action + '' + product;

                            if (data.affiliate == null && !data.isAffiliate) {
                                action = action + '' + convertAffiliate;
                            }

                            return action;
                        }
                    }
                ]
            });
            //$('#customerList table').on('draw.dt', function () {
            //    customerList.dataTable.api().columns.adjust().responsive.recalc();
            //});
            $('#customerList table').on('click', 'td a.btn-convert', function (e) {
                e.preventDefault();
                var tr = $(this).closest('tr');
                var data = customerList.dataTable.api().row(tr).data();
                convertToAffiliate(customerList, data);
            });
        });

        function suspendCustomer(customerList, rowData)
        {
            var customer = rowData.customer;
            confirm2('Are you sure you want to suspend '+ customer.user.username , 'Suspend Customer', {
                'type': null,
                'confirmButtonClass': 'btn-success btn-md',
                'confirmButtonText': 'Yes',
                'cancelButtonClass': 'btn-inverse btn-md',
                'cancelButtonText': 'Cancel',
                'html': true,
                'showLoaderOnConfirm': true
            }, function(isSuspended) {
                if(isSuspended) {
                    $.ajax({
                        url : "{{ path('user.suspend') }}",
                        globalAjaxComplete : false,
                        type: "POST",
                        dataType: "JSON",
                        data: {
                            "userId": customer.user.id
                        },
                        success : function (data) {
                            var notifications = data.__notifications || [];
                            swal({
                                'type': notifications.type,
                                'title': notifications.title,
                                'text': notifications.message
                            }, function() {
                                customerList.forceReloadTable();
                            });
                        }
                    });
                }
            });
        }

        function activateCustomer(customerList, rowData)
        {
            var customer = rowData.customer;
            confirm2('Are you sure you want to activate '+ customer.user.username , 'Activate Customer', {
                'type': null,
                'confirmButtonClass': 'btn-success btn-md',
                'confirmButtonText': 'Yes',
                'html': true,
                'showLoaderOnConfirm': true
            }, function(isActivated) {
                if(isActivated) {
                    $.ajax({
                        url : "{{ path('user.activate') }}",
                        globalAjaxComplete : false,
                        type: "POST",
                        dataType: "JSON",
                        data: {
                            "userId": customer.user.id
                        },
                        'success': function (data) {
                            var notifications = data.__notifications || [];
                            swal({
                                'type': notifications.type,
                                'title': notifications.title,
                                'text': notifications.message
                            }, function() {
                                customerList.forceReloadTable();
                            });
                        }
                    });
                }
            });
        }

        function convertToAffiliate(customerList, rowData)
        {
            var customer = rowData.customer;
            var postUrl = '{{ path('customer.convert_to_affiliate', {'id': 'customer_id', 'callback': "false" }) }}';
            confirm2('Are you sure you want to make an affiliate account for '+ customer.fName + '&nbsp;' + customer.lName + 'customer?', 'Convert Customer', {
                'type': null,
                'confirmButtonClass': 'btn-success btn-md',
                'confirmButtonText': 'Create',
                'cancelButtonClass': 'btn-inverse btn-md',
                'cancelButtonText': 'Cancel',
                'html': true,
                'showLoaderOnConfirm': true
            }, function(isConverted) {
                if(isConverted) {
                    $.ajax({
                        url : postUrl.replace("customer_id", customer.id),
                        globalAjaxComplete : false,
                        type: "GET",
                        dataType: "JSON",
                        data: {
                            "customerId": customer.id
                        },
                        success : function (data) {
                            var notifications = data.__notifications || [];
                            swal({
                                'type': notifications.type,
                                'title': notifications.title,
                                'text': notifications.message
                            }, function() {
                                var redirectUrl = '{{path('affiliate.update_page', {"id": "customer_id"}) }}';
                                window.location = redirectUrl.replace("customer_id", customer.id);
                            });
                        }
                    });
                }
            });
        }
    </script>

{% endblock %}

