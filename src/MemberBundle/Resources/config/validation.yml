MemberBundle\Request\CreateMemberProductRequest:
    constraints:
        - MemberBundle\Constraints\UniqueCustomerProductConstraint:
            action: "create"
            errorPath: "username"
            message: "The combination for Customer Product username, currency, and product must be unique."
        - MemberBundle\Constraints\SyncIdConstraint: ~
    properties:
        username:
            - NotBlank: ~
        product:
            - NotBlank: ~
MemberBundle\Request\UpdateMemberProductRequest:
    constraints:
        - MemberBundle\Constraints\UniqueCustomerProductConstraint:
                action: "update"
                errorPath: "username"
                message: "The combination for Customer Product username, currency, and product must be unique."
        - MemberBundle\Constraints\SyncIdConstraint: ~
    properties:
        username:
            - NotBlank: ~

MemberBundle\Request\CreateMemberRequest:
    group_sequence_provider: true
    properties:
        email:
            - NotBlank:
                  groups: [withEmail]
            - Email:
                  groups: [withEmail]
            - Length:
                max: 72
                groups: [withEmail]
            - AppBundle\Validator\Constraints\Unique:
                  entityClass: DbBundle\Entity\User
                  select: " e.email "
                  expression: " e.email = :value0 AND e.type = 1"
                  # 1 in e.type = 1 is Member
                  requiredKey: [email]
                  groups: [withEmail]
        phoneNumber:
            - NotBlank:
                groups: [withPhone]
#        username:
#            - NotBlank: ~
#            - Regex:
#                pattern: '/^[A-Za-z0-9\_\-\@\.]*$/u'
#                match: true
#                message: username.regex
#            - Length:
#                min: 4
#                max: 50
#                minMessage: username.min
#                maxMessage: username.max
#            - AppBundle\Validator\Constraints\Unique:
#                  entityClass: DbBundle\Entity\User
#                  select: " e.username "
#                  expression: " e.username = :value0 AND e.type = 1"
#                  # 1 in e.type = 1 is Member
#                  requiredKey: [username]
        password:
            - NotBlank: ~
        confirmPassword:
            - Expression:
                expression: this.isConfirmPasswordCorrect()
                message: Confirm password must be equal to Password
        # fullName:            
        #     - Length:
        #         min: 1
        #         minMessage: customer.fullName.min
        #         max: 100
        #         maxMessage: customer.fullName.max
        #     - Regex:
        #         pattern: '/^[A-Za-z0-9\s\P{Han}]*$/u'
        #         match: true
        #         message: customer.fullName.regex
        birthDate:
            - Date: ~
            - GreaterThanOrEqual:
                value: -100 years
                message: customer.birthDate.valid
            - LessThanOrEqual:
                value: -18 years
                message: customer.birthDate.valid
        gender:
            - NotBlank: ~
        joinedAt:
            - NotBlank: ~
            - LessThanOrEqual:
                value: tomorrow
                message: customer.joinedAt.invalid
        currency:
            - NotBlank: ~
        country:
            - NotBlank:
                  groups: [withPhone]
        groups:
            - Count:
                min: 1
                minMessage: Customer must have at least one group.
MemberBundle\Request\UpdateProfileRequest:
    constraints:
        - AppBundle\Validator\Constraints\Unique:
            entityClass: DbBundle\Entity\User
            select: " e.email "
            expression: " e.email = :email AND e.type = 1 AND e.id <> :id"
            expressionParams:
                email: "object.getEmail()"
                id: "object.getUser().getId()"
            message: "Email already exists"
            errorPath: 'email'
        - AppBundle\Validator\Constraints\Unique:
            entityClass: DbBundle\Entity\User
            select: " e.username "
            expression: " e.username = :username AND e.type = 1 AND e.id <> :id"
            expressionParams:
                username: "object.getUsername()"
                id: "object.getUser().getId()"
            message: "Username already exists"
            errorPath: 'username'
    properties:
        affiliateLink:
            - Regex:
                pattern: '/^\S{4,20}$/'
                match: true
                message: "Referrer code must be between 4-20 characters and does not contain space."
        email:
            - NotBlank: ~
            - Email: ~
            - Length:
                max: 72
        username:
            - NotBlank: ~
            - Regex:
                pattern: '/^[A-Za-z0-9\_\-\@\.]*$/u'
                match: true
                message: username.regex
            - Length:
                min: 4
                max: 255
                minMessage: username.min
                maxMessage: username.max
        # fullName:
        #     - NotBlank: ~
        #     - Length:
        #         min: 1
        #         minMessage: customer.fullName.min
        #         max: 100
        #         maxMessage: customer.fullName.max
        #     - Regex:
        #         pattern: '/^[A-Za-z0-9\s\P{Han}]*$/u'
        #         match: true
        #         message: customer.fullName.regex
        birthDate:
            - NotBlank: ~
            - Date: ~
            - GreaterThanOrEqual:
                value: -100 years
                message: customer.birthDate.valid
            - LessThanOrEqual:
                value: -18 years
                message: customer.birthDate.valid
        joinedAt:
            - NotBlank: ~
            - LessThanOrEqual:
                value: tomorrow
                message: customer.joinedAt.invalid
        currency:
            - NotBlank: ~
        country:
            - NotBlank: ~
        gender:
            - NotBlank: ~
        groups:
            - Count:
                min: 1
                minMessage: Customer must have at least one group.

MemberBundle\Request\UpdatePasswordRequest:
    constraints:
        - MemberBundle\Constraints\EqualConstraint:
            first: password
            second: confirmPassword
    properties:
        password:
            - NotBlank: ~
            - Regex:
                pattern: /(?=^.{8,}$)(?=(.*[0-9]){2,})(?=(.*[A-Za-z]){2,})(?=(.*[+\-\/\{~\}!"^_`\[\]:$!@#%^&*\?]){2,})/
                match: true
                message: password.regex
        confirmPassword:
            - NotBlank: ~

MemberBundle\Request\UpdateTransactionPasswordRequest:
    constraints:
        - MemberBundle\Constraints\EqualConstraint:
            first: password
            second: confirmPassword
    properties:
        password:
            - NotBlank:
                message: "Transaction Password is required!"
            - Length:
                min: 6
                minMessage: "Minimum of 6 alphanumeric characters."
            - Regex:
                pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)([a-zA-Z 0-9])+$/
                match: true
                message: transactionPassword.regex
        confirmPassword:
            - NotBlank:
                message: "Confirm Transaction Password is required!"

MemberBundle\Request\CreateMemberReferralNameRequest:
    constraints:
        - MemberBundle\Constraints\MaxActiveReferralNameConstraint:
            errorPath: name
            memberIdPath: 'object.getMember().getId()'
    properties:
        name:
            - NotBlank: ~
            - Regex:
                pattern: '/^\S{4,20}$/'
                match: true
                message: "Referrer code must be between 4-20 characters and does not contain space."
            - AppBundle\Validator\Constraints\Unique:
                entityClass: DbBundle\Entity\MemberReferralName
                select: " e.name "
                expression: " e.name = :value0 "
                requiredKey: [name]

MemberBundle\Request\CreateWebsiteRequest:
    constraints:
        - MemberBundle\Constraints\MaxActiveWebsiteConstraint:
            errorPath: website
            memberIdPath: 'object.getMember().getId()'
    properties:
        website:
            - NotBlank: ~
            - Regex:
                pattern: ~^((?:https?:\/\/)?[^./]+(?:\.[^./]+)+(?:\/.*)?)$~ixu
                match: true
                message: Invalid domain name
            - AppBundle\Validator\Constraints\Unique:
                entityClass: DbBundle\Entity\MemberWebsite
                select: " e.website "
                expression: " e.website = :value0 "
                requiredKey: [website]

MemberBundle\Request\AddCommissionRequest:
    properties:
        commission:
            - NotBlank: ~
            - Regex:
                pattern: /^(0|[1-9]\d*)(\.\d+)?$/
                match: true
                message: Invalid commission value.
            - LessThan:
                value: 100
                message: Commission should be less than 100.
            - AppBundle\Validator\Constraints\DecimalLength:
                length: 10

MemberBundle\Request\UpdateCommissionRequest:
    properties:
        commission:
            - NotBlank: ~
            - Regex:
                pattern: /^(0|[1-9]\d*)(\.\d+)?$/
                match: true
                message: Invalid commission value.
            - LessThan:
                value: 100
                message: Commission should be less than 100.
            - AppBundle\Validator\Constraints\DecimalLength:
                length: 10

MemberBundle\Request\SendResetPasswordRequest:
    properties:
        origin:
            - NotBlank: ~